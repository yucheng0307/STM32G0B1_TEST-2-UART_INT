
TEST-2-UART_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a64  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba8  08004ba8  0000602c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ba8  08004ba8  00005ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb0  08004bb0  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00005bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00005bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004bb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000002c  08004be4  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004be4  0000617c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c59b  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8f  00000000  00000000  000125ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00014580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075f  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad6c  00000000  00000000  00015677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d117  00000000  00000000  000303e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad4a0  00000000  00000000  0003d4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea99a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c8  00000000  00000000  000ea9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ecaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004b08 	.word	0x08004b08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08004b08 	.word	0x08004b08

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 fa3f 	bl	8004ab0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_GPIO_Init+0xc0>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_GPIO_Init+0xc0>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 feac 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2288      	movs	r2, #136	@ 0x88
 8000694:	0352      	lsls	r2, r2, #13
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f000 fd2f 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2220      	movs	r2, #32
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	23a0      	movs	r3, #160	@ 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fd1b 	bl	8001108 <HAL_GPIO_Init>

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b009      	add	sp, #36	@ 0x24
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000
 80006e0:	50000800 	.word	0x50000800

080006e4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <HAL_UART_RxCpltCallback+0x54>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d10b      	bne.n	800070e <HAL_UART_RxCpltCallback+0x2a>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart1,tx1_buff,sizeof(tx1_buff));
 80006f6:	4911      	ldr	r1, [pc, #68]	@ (800073c <HAL_UART_RxCpltCallback+0x58>)
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 80006fa:	220d      	movs	r2, #13
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fe8f 	bl	8002420 <HAL_UART_Transmit_IT>
		// reset receive int
		HAL_UART_Receive_IT(&huart1,rx1_buff,sizeof(rx1_buff));
 8000702:	4910      	ldr	r1, [pc, #64]	@ (8000744 <HAL_UART_RxCpltCallback+0x60>)
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 8000706:	2204      	movs	r2, #4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 ff31 	bl	8002570 <HAL_UART_Receive_IT>
	}

	if(huart->Instance==USART2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <HAL_UART_RxCpltCallback+0x64>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d10b      	bne.n	8000730 <HAL_UART_RxCpltCallback+0x4c>
	{
		//answer to host
		HAL_UART_Transmit_IT(&huart2,tx2_buff,sizeof(tx2_buff));
 8000718:	490c      	ldr	r1, [pc, #48]	@ (800074c <HAL_UART_RxCpltCallback+0x68>)
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <HAL_UART_RxCpltCallback+0x6c>)
 800071c:	220d      	movs	r2, #13
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fe7e 	bl	8002420 <HAL_UART_Transmit_IT>
		// reset receive int
		HAL_UART_Receive_IT(&huart2,rx2_buff,sizeof(rx2_buff));
 8000724:	490b      	ldr	r1, [pc, #44]	@ (8000754 <HAL_UART_RxCpltCallback+0x70>)
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <HAL_UART_RxCpltCallback+0x6c>)
 8000728:	2204      	movs	r2, #4
 800072a:	0018      	movs	r0, r3
 800072c:	f001 ff20 	bl	8002570 <HAL_UART_Receive_IT>
	}
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013800 	.word	0x40013800
 800073c:	20000000 	.word	0x20000000
 8000740:	20000050 	.word	0x20000050
 8000744:	20000048 	.word	0x20000048
 8000748:	40004400 	.word	0x40004400
 800074c:	20000010 	.word	0x20000010
 8000750:	200000e4 	.word	0x200000e4
 8000754:	2000004c 	.word	0x2000004c

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fa6e 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f828 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f7ff ff5a 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f936 	bl	80009d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800076c:	f000 f8e6 	bl	800093c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,rx1_buff,sizeof(rx1_buff));//receive int enable
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <main+0x4c>)
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <main+0x50>)
 8000774:	2204      	movs	r2, #4
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fefa 	bl	8002570 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,rx2_buff,sizeof(rx2_buff));//receive int enable
 800077c:	490b      	ldr	r1, [pc, #44]	@ (80007ac <main+0x54>)
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <main+0x58>)
 8000780:	2204      	movs	r2, #4
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fef4 	bl	8002570 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);//LED-Green flash
 8000788:	23a0      	movs	r3, #160	@ 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2120      	movs	r1, #32
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fe43 	bl	800141a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);//delay 1000 ms
 8000794:	23fa      	movs	r3, #250	@ 0xfa
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fad5 	bl	8000d48 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);//LED-Green flash
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	e7f2      	b.n	8000788 <main+0x30>
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000048 	.word	0x20000048
 80007a8:	20000050 	.word	0x20000050
 80007ac:	2000004c 	.word	0x2000004c
 80007b0:	200000e4 	.word	0x200000e4

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b095      	sub	sp, #84	@ 0x54
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	2414      	movs	r4, #20
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	233c      	movs	r3, #60	@ 0x3c
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f004 f973 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2310      	movs	r3, #16
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f004 f96c 	bl	8004ab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fe37 	bl	8001450 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2202      	movs	r2, #2
 80007e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	0052      	lsls	r2, r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007f0:	0021      	movs	r1, r4
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2240      	movs	r2, #64	@ 0x40
 80007fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2202      	movs	r2, #2
 8000802:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2202      	movs	r2, #2
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2208      	movs	r2, #8
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	0292      	lsls	r2, r2, #10
 800081c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	0492      	lsls	r2, r2, #18
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	0592      	lsls	r2, r2, #22
 800082c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	187b      	adds	r3, r7, r1
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fe59 	bl	80014e8 <HAL_RCC_OscConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800083a:	f000 f819 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2202      	movs	r2, #2
 8000848:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2102      	movs	r1, #2
 800085a:	0018      	movs	r0, r3
 800085c:	f001 f9a4 	bl	8001ba8 <HAL_RCC_ClockConfig>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000864:	f000 f804 	bl	8000870 <Error_Handler>
  }
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b015      	add	sp, #84	@ 0x54
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	641a      	str	r2, [r3, #64]	@ 0x40
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_MspInit+0x4c>)
 800089c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	430a      	orrs	r2, r1
 80008a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008b6:	23c0      	movs	r3, #192	@ 0xc0
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fa68 	bl	8000d90 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 fa0c 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <USART1_IRQHandler+0x14>)
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fe98 	bl	800263c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	20000050 	.word	0x20000050

08000918 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <USART2_LPUART2_IRQHandler+0x14>)
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fe8c 	bl	800263c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	200000e4 	.word	0x200000e4

08000930 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000940:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000942:	4a24      	ldr	r2, [pc, #144]	@ (80009d4 <MX_USART1_UART_Init+0x98>)
 8000944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000946:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000948:	22e1      	movs	r2, #225	@ 0xe1
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097e:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000986:	0018      	movs	r0, r3
 8000988:	f001 fcf4 	bl	8002374 <HAL_UART_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000990:	f7ff ff6e 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 8000996:	2100      	movs	r1, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f003 ffa9 	bl	80048f0 <HAL_UARTEx_SetTxFifoThreshold>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009a2:	f7ff ff65 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f003 ffe0 	bl	8004970 <HAL_UARTEx_SetRxFifoThreshold>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f7ff ff5c 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <MX_USART1_UART_Init+0x94>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 ff5e 	bl	800487c <HAL_UARTEx_DisableFifoMode>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f7ff ff54 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000050 	.word	0x20000050
 80009d4:	40013800 	.word	0x40013800

080009d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 80009de:	4a24      	ldr	r2, [pc, #144]	@ (8000a70 <MX_USART2_UART_Init+0x98>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 80009e4:	22e1      	movs	r2, #225	@ 0xe1
 80009e6:	0252      	lsls	r2, r2, #9
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fca6 	bl	8002374 <HAL_UART_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f7ff ff20 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f003 ff5b 	bl	80048f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3e:	f7ff ff17 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a44:	2100      	movs	r1, #0
 8000a46:	0018      	movs	r0, r3
 8000a48:	f003 ff92 	bl	8004970 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f7ff ff0e 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <MX_USART2_UART_Init+0x94>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f003 ff10 	bl	800487c <HAL_UARTEx_DisableFifoMode>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f7ff ff06 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	200000e4 	.word	0x200000e4
 8000a70:	40004400 	.word	0x40004400

08000a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b09f      	sub	sp, #124	@ 0x7c
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	2364      	movs	r3, #100	@ 0x64
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	0018      	movs	r0, r3
 8000a82:	2314      	movs	r3, #20
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f004 f812 	bl	8004ab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	2418      	movs	r4, #24
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	234c      	movs	r3, #76	@ 0x4c
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f004 f80a 	bl	8004ab0 <memset>
  if(uartHandle->Instance==USART1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd8 <HAL_UART_MspInit+0x164>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d146      	bne.n	8000b34 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fa21 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000abe:	f7ff fed7 	bl	8000870 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac2:	4b46      	ldr	r3, [pc, #280]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac6:	4b45      	ldr	r3, [pc, #276]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	01c9      	lsls	r1, r1, #7
 8000acc:	430a      	orrs	r2, r1
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ad0:	4b42      	ldr	r3, [pc, #264]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	01db      	lsls	r3, r3, #7
 8000ad8:	4013      	ands	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b3f      	ldr	r3, [pc, #252]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aea:	4b3c      	ldr	r3, [pc, #240]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aee:	2204      	movs	r2, #4
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000af6:	2164      	movs	r1, #100	@ 0x64
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2230      	movs	r2, #48	@ 0x30
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2201      	movs	r2, #1
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	4a31      	ldr	r2, [pc, #196]	@ (8000be0 <HAL_UART_MspInit+0x16c>)
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0010      	movs	r0, r2
 8000b1e:	f000 faf3 	bl	8001108 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	201b      	movs	r0, #27
 8000b28:	f000 f9f4 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b2c:	201b      	movs	r0, #27
 8000b2e:	f000 fa06 	bl	8000f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b32:	e04c      	b.n	8000bce <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a2a      	ldr	r2, [pc, #168]	@ (8000be4 <HAL_UART_MspInit+0x170>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d147      	bne.n	8000bce <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b3e:	2118      	movs	r1, #24
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2202      	movs	r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f9d4 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000b58:	f7ff fe8a 	bl	8000870 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	0289      	lsls	r1, r1, #10
 8000b66:	430a      	orrs	r2, r1
 8000b68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b6e:	2380      	movs	r3, #128	@ 0x80
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	430a      	orrs	r2, r1
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0x168>)
 8000b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b90:	2164      	movs	r1, #100	@ 0x64
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	220c      	movs	r2, #12
 8000b96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2201      	movs	r2, #1
 8000bae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	187a      	adds	r2, r7, r1
 8000bb2:	23a0      	movs	r3, #160	@ 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f000 faa5 	bl	8001108 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	201c      	movs	r0, #28
 8000bc4:	f000 f9a6 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000bc8:	201c      	movs	r0, #28
 8000bca:	f000 f9b8 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b01f      	add	sp, #124	@ 0x7c
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	50000800 	.word	0x50000800
 8000be4:	40004400 	.word	0x40004400

08000be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bec:	f7ff fea0 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c16:	f003 ff53 	bl	8004ac0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c1a:	f7ff fd9d 	bl	8000758 <main>

08000c1e <LoopForever>:

LoopForever:
  b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   r0, =_estack
 8000c20:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000c2c:	08004bb8 	.word	0x08004bb8
  ldr r2, =_sbss
 8000c30:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000c34:	2000017c 	.word	0x2000017c

08000c38 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_COMP_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_Init+0x3c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_Init+0x3c>)
 8000c4e:	2180      	movs	r1, #128	@ 0x80
 8000c50:	0049      	lsls	r1, r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f810 	bl	8000c7c <HAL_InitTick>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe08 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	781b      	ldrb	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c84:	230f      	movs	r3, #15
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <HAL_InitTick+0x88>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d02b      	beq.n	8000cec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c94:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <HAL_InitTick+0x8c>)
 8000c96:	681c      	ldr	r4, [r3, #0]
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_InitTick+0x88>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	23fa      	movs	r3, #250	@ 0xfa
 8000ca0:	0098      	lsls	r0, r3, #2
 8000ca2:	f7ff fa2f 	bl	8000104 <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	0019      	movs	r1, r3
 8000caa:	0020      	movs	r0, r4
 8000cac:	f7ff fa2a 	bl	8000104 <__udivsi3>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 f953 	bl	8000f5e <HAL_SYSTICK_Config>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d112      	bne.n	8000ce2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d80a      	bhi.n	8000cd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 f922 	bl	8000f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_InitTick+0x90>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e00d      	b.n	8000cf4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cd8:	230f      	movs	r3, #15
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e008      	b.n	8000cf4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e003      	b.n	8000cf4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b005      	add	sp, #20
 8000d00:	bd90      	pop	{r4, r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000028 	.word	0x20000028
 8000d08:	20000020 	.word	0x20000020
 8000d0c:	20000024 	.word	0x20000024

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_IncTick+0x1c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	18d2      	adds	r2, r2, r3
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	20000178 	.word	0x20000178

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b02      	ldr	r3, [pc, #8]	@ (8000d44 <HAL_GetTick+0x10>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	20000178 	.word	0x20000178

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fff0 	bl	8000d34 <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	001a      	movs	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	189b      	adds	r3, r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	f7ff ffe0 	bl	8000d34 <HAL_GetTick>
 8000d74:	0002      	movs	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000028 	.word	0x20000028

08000d90 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	0019      	movs	r1, r3
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	40010000 	.word	0x40010000
 8000db8:	fffff9ff 	.word	0xfffff9ff

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dce:	d809      	bhi.n	8000de4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	231f      	movs	r3, #31
 8000dd8:	401a      	ands	r2, r3
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_EnableIRQ+0x30>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4091      	lsls	r1, r2
 8000de0:	000a      	movs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e04:	d828      	bhi.n	8000e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <__NVIC_SetPriority+0xd4>)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	33c0      	adds	r3, #192	@ 0xc0
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	589b      	ldr	r3, [r3, r2]
 8000e16:	1dfa      	adds	r2, r7, #7
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	400a      	ands	r2, r1
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	21ff      	movs	r1, #255	@ 0xff
 8000e24:	4091      	lsls	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	43d2      	mvns	r2, r2
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	401a      	ands	r2, r3
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	4003      	ands	r3, r0
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	481f      	ldr	r0, [pc, #124]	@ (8000ec4 <__NVIC_SetPriority+0xd4>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	33c0      	adds	r3, #192	@ 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e56:	e031      	b.n	8000ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <__NVIC_SetPriority+0xd8>)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0019      	movs	r1, r3
 8000e60:	230f      	movs	r3, #15
 8000e62:	400b      	ands	r3, r1
 8000e64:	3b08      	subs	r3, #8
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3306      	adds	r3, #6
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	3304      	adds	r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1dfa      	adds	r2, r7, #7
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	0011      	movs	r1, r2
 8000e78:	2203      	movs	r2, #3
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	00d2      	lsls	r2, r2, #3
 8000e7e:	21ff      	movs	r1, #255	@ 0xff
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	22ff      	movs	r2, #255	@ 0xff
 8000e90:	401a      	ands	r2, r3
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0018      	movs	r0, r3
 8000e98:	2303      	movs	r3, #3
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <__NVIC_SetPriority+0xd8>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	001c      	movs	r4, r3
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	4023      	ands	r3, r4
 8000eac:	3b08      	subs	r3, #8
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	3306      	adds	r3, #6
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	18c3      	adds	r3, r0, r3
 8000eb8:	3304      	adds	r3, #4
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	045b      	lsls	r3, r3, #17
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d301      	bcc.n	8000ee4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e010      	b.n	8000f06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <SysTick_Config+0x44>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	3a01      	subs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eec:	2301      	movs	r3, #1
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff ff7c 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x44>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	210f      	movs	r1, #15
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	0002      	movs	r2, r0
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff ff33 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff ffaf 	bl	8000ecc <SysTick_Config>
 8000f6e:	0003      	movs	r3, r0
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e04f      	b.n	800102a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2225      	movs	r2, #37	@ 0x25
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2224      	movs	r2, #36	@ 0x24
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e040      	b.n	800102a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	210e      	movs	r1, #14
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc2:	491c      	ldr	r1, [pc, #112]	@ (8001034 <HAL_DMA_Abort+0xbc>)
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fdc:	221c      	movs	r2, #28
 8000fde:	401a      	ands	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4091      	lsls	r1, r2
 8000fe8:	000a      	movs	r2, r1
 8000fea:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ff4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001008:	490a      	ldr	r1, [pc, #40]	@ (8001034 <HAL_DMA_Abort+0xbc>)
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001016:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2225      	movs	r2, #37	@ 0x25
 800101c:	2101      	movs	r1, #1
 800101e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2224      	movs	r2, #36	@ 0x24
 8001024:	2100      	movs	r1, #0
 8001026:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	fffffeff 	.word	0xfffffeff

08001038 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	210f      	movs	r1, #15
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2225      	movs	r2, #37	@ 0x25
 800104c:	5c9b      	ldrb	r3, [r3, r2]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d006      	beq.n	8001062 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e048      	b.n	80010f4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	210e      	movs	r1, #14
 800106e:	438a      	bics	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108c:	491d      	ldr	r1, [pc, #116]	@ (8001104 <HAL_DMA_Abort_IT+0xcc>)
 800108e:	400a      	ands	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	221c      	movs	r2, #28
 8001098:	401a      	ands	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	2101      	movs	r1, #1
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00c      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c2:	4910      	ldr	r1, [pc, #64]	@ (8001104 <HAL_DMA_Abort_IT+0xcc>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2225      	movs	r2, #37	@ 0x25
 80010d6:	2101      	movs	r1, #1
 80010d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2224      	movs	r2, #36	@ 0x24
 80010de:	2100      	movs	r1, #0
 80010e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	0010      	movs	r0, r2
 80010f2:	4798      	blx	r3
    }
  }
  return status;
 80010f4:	230f      	movs	r3, #15
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	fffffeff 	.word	0xfffffeff

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e14d      	b.n	80013b4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <HAL_GPIO_Init+0x28>
 800112e:	e13e      	b.n	80013ae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	4013      	ands	r3, r2
 8001138:	2b01      	cmp	r3, #1
 800113a:	d005      	beq.n	8001148 <HAL_GPIO_Init+0x40>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2203      	movs	r2, #3
 8001142:	4013      	ands	r3, r2
 8001144:	2b02      	cmp	r3, #2
 8001146:	d130      	bne.n	80011aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	409a      	lsls	r2, r3
 800116a:	0013      	movs	r3, r2
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117e:	2201      	movs	r2, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	2201      	movs	r2, #1
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d017      	beq.n	80011e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d123      	bne.n	800123a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	58d3      	ldr	r3, [r2, r3]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2207      	movs	r2, #7
 8001204:	4013      	ands	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2107      	movs	r1, #7
 800121e:	400b      	ands	r3, r1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	23c0      	movs	r3, #192	@ 0xc0
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_GPIO_Init+0x174>
 800127a:	e098      	b.n	80013ae <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800127c:	4a53      	ldr	r2, [pc, #332]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3318      	adds	r3, #24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	589b      	ldr	r3, [r3, r2]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2203      	movs	r2, #3
 800128e:	4013      	ands	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	220f      	movs	r2, #15
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	43da      	mvns	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	23a0      	movs	r3, #160	@ 0xa0
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x1d6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	@ (80013d0 <HAL_GPIO_Init+0x2c8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1d2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a47      	ldr	r2, [pc, #284]	@ (80013d4 <HAL_GPIO_Init+0x2cc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1ce>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a46      	ldr	r2, [pc, #280]	@ (80013d8 <HAL_GPIO_Init+0x2d0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1ca>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <HAL_GPIO_Init+0x2d4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1c6>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012ce:	2305      	movs	r3, #5
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012de:	2300      	movs	r3, #0
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	2103      	movs	r1, #3
 80012e4:	400a      	ands	r2, r1
 80012e6:	00d2      	lsls	r2, r2, #3
 80012e8:	4093      	lsls	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012f0:	4936      	ldr	r1, [pc, #216]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3318      	adds	r3, #24
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fe:	4b33      	ldr	r3, [pc, #204]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	035b      	lsls	r3, r3, #13
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	039b      	lsls	r3, r3, #14
 8001340:	4013      	ands	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001352:	4a1e      	ldr	r2, [pc, #120]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 8001354:	2384      	movs	r3, #132	@ 0x84
 8001356:	58d3      	ldr	r3, [r2, r3]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43da      	mvns	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001378:	4914      	ldr	r1, [pc, #80]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 800137a:	2284      	movs	r2, #132	@ 0x84
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	58d3      	ldr	r3, [r2, r3]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a6:	4909      	ldr	r1, [pc, #36]	@ (80013cc <HAL_GPIO_Init+0x2c4>)
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	40da      	lsrs	r2, r3
 80013bc:	1e13      	subs	r3, r2, #0
 80013be:	d000      	beq.n	80013c2 <HAL_GPIO_Init+0x2ba>
 80013c0:	e6aa      	b.n	8001118 <HAL_GPIO_Init+0x10>
  }
}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b006      	add	sp, #24
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021800 	.word	0x40021800
 80013d0:	50000400 	.word	0x50000400
 80013d4:	50000800 	.word	0x50000800
 80013d8:	50000c00 	.word	0x50000c00
 80013dc:	50001000 	.word	0x50001000

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	0008      	movs	r0, r1
 80013ea:	0011      	movs	r1, r2
 80013ec:	1cbb      	adds	r3, r7, #2
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	1c7b      	adds	r3, r7, #1
 80013f4:	1c0a      	adds	r2, r1, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f8:	1c7b      	adds	r3, r7, #1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	000a      	movs	r2, r1
 8001424:	1cbb      	adds	r3, r7, #2
 8001426:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142e:	1cbb      	adds	r3, r7, #2
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	1cb9      	adds	r1, r7, #2
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	400b      	ands	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
}
 8001448:	46c0      	nop			@ (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	@ (80014c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800145e:	4013      	ands	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	429a      	cmp	r2, r3
 8001472:	d11f      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	0013      	movs	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	189b      	adds	r3, r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4912      	ldr	r1, [pc, #72]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001482:	0018      	movs	r0, r3
 8001484:	f7fe fe3e 	bl	8000104 <__udivsi3>
 8001488:	0003      	movs	r3, r0
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148e:	e008      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3b01      	subs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e001      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e009      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	401a      	ands	r2, r3
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d0ed      	beq.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	40007000 	.word	0x40007000
 80014c4:	fffff9ff 	.word	0xfffff9ff
 80014c8:	20000020 	.word	0x20000020
 80014cc:	000f4240 	.word	0x000f4240

080014d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	23e0      	movs	r3, #224	@ 0xe0
 80014da:	01db      	lsls	r3, r3, #7
 80014dc:	4013      	ands	r3, r2
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 fb50 	bl	8001b9c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	4013      	ands	r3, r2
 8001504:	d100      	bne.n	8001508 <HAL_RCC_OscConfig+0x20>
 8001506:	e07c      	b.n	8001602 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001508:	4bc3      	ldr	r3, [pc, #780]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2238      	movs	r2, #56	@ 0x38
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001512:	4bc1      	ldr	r3, [pc, #772]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d102      	bne.n	8001528 <HAL_RCC_OscConfig+0x40>
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d002      	beq.n	800152e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b08      	cmp	r3, #8
 800152c:	d10b      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	4bba      	ldr	r3, [pc, #744]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	4013      	ands	r3, r2
 8001538:	d062      	beq.n	8001600 <HAL_RCC_OscConfig+0x118>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d15e      	bne.n	8001600 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e32a      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	429a      	cmp	r2, r3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_OscConfig+0x7a>
 8001552:	4bb1      	ldr	r3, [pc, #708]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4bb0      	ldr	r3, [pc, #704]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	0249      	lsls	r1, r1, #9
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e020      	b.n	80015a4 <HAL_RCC_OscConfig+0xbc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	23a0      	movs	r3, #160	@ 0xa0
 8001568:	02db      	lsls	r3, r3, #11
 800156a:	429a      	cmp	r2, r3
 800156c:	d10e      	bne.n	800158c <HAL_RCC_OscConfig+0xa4>
 800156e:	4baa      	ldr	r3, [pc, #680]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4ba9      	ldr	r3, [pc, #676]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	02c9      	lsls	r1, r1, #11
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	4ba6      	ldr	r3, [pc, #664]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4ba5      	ldr	r3, [pc, #660]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	0249      	lsls	r1, r1, #9
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xbc>
 800158c:	4ba2      	ldr	r3, [pc, #648]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4ba1      	ldr	r3, [pc, #644]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001592:	49a2      	ldr	r1, [pc, #648]	@ (800181c <HAL_RCC_OscConfig+0x334>)
 8001594:	400a      	ands	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	4b9f      	ldr	r3, [pc, #636]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b9e      	ldr	r3, [pc, #632]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800159e:	49a0      	ldr	r1, [pc, #640]	@ (8001820 <HAL_RCC_OscConfig+0x338>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d014      	beq.n	80015d6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fbc2 	bl	8000d34 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b6:	f7ff fbbd 	bl	8000d34 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b64      	cmp	r3, #100	@ 0x64
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e2e9      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c8:	4b93      	ldr	r3, [pc, #588]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0xce>
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fbad 	bl	8000d34 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fba8 	bl	8000d34 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e2d4      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b89      	ldr	r3, [pc, #548]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	029b      	lsls	r3, r3, #10
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xf8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d100      	bne.n	800160e <HAL_RCC_OscConfig+0x126>
 800160c:	e099      	b.n	8001742 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2238      	movs	r2, #56	@ 0x38
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b7f      	ldr	r3, [pc, #508]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2203      	movs	r2, #3
 800161e:	4013      	ands	r3, r2
 8001620:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b10      	cmp	r3, #16
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x146>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d002      	beq.n	8001634 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d135      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	4b78      	ldr	r3, [pc, #480]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4013      	ands	r3, r2
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x164>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e2a7      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b72      	ldr	r3, [pc, #456]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a74      	ldr	r2, [pc, #464]	@ (8001824 <HAL_RCC_OscConfig+0x33c>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	021a      	lsls	r2, r3, #8
 800165c:	4b6e      	ldr	r3, [pc, #440]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001668:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <HAL_RCC_OscConfig+0x340>)
 800166e:	4013      	ands	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	4b68      	ldr	r3, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800167c:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0adb      	lsrs	r3, r3, #11
 8001682:	2207      	movs	r2, #7
 8001684:	4013      	ands	r3, r2
 8001686:	4a69      	ldr	r2, [pc, #420]	@ (800182c <HAL_RCC_OscConfig+0x344>)
 8001688:	40da      	lsrs	r2, r3
 800168a:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <HAL_RCC_OscConfig+0x348>)
 800168c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800168e:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <HAL_RCC_OscConfig+0x34c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff faf2 	bl	8000c7c <HAL_InitTick>
 8001698:	1e03      	subs	r3, r0, #0
 800169a:	d051      	beq.n	8001740 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e27d      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d030      	beq.n	800170a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001828 <HAL_RCC_OscConfig+0x340>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	4b58      	ldr	r3, [pc, #352]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b56      	ldr	r3, [pc, #344]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b55      	ldr	r3, [pc, #340]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80016c2:	2180      	movs	r1, #128	@ 0x80
 80016c4:	0049      	lsls	r1, r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb33 	bl	8000d34 <HAL_GetTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb2e 	bl	8000d34 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e25a      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4013      	ands	r3, r2
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b49      	ldr	r3, [pc, #292]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001824 <HAL_RCC_OscConfig+0x33c>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	021a      	lsls	r2, r3, #8
 8001702:	4b45      	ldr	r3, [pc, #276]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	e01b      	b.n	8001742 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001710:	4949      	ldr	r1, [pc, #292]	@ (8001838 <HAL_RCC_OscConfig+0x350>)
 8001712:	400a      	ands	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fb0d 	bl	8000d34 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fb08 	bl	8000d34 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e234      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001732:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x238>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2208      	movs	r2, #8
 8001748:	4013      	ands	r3, r2
 800174a:	d047      	beq.n	80017dc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800174c:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2238      	movs	r2, #56	@ 0x38
 8001752:	4013      	ands	r3, r2
 8001754:	2b18      	cmp	r3, #24
 8001756:	d10a      	bne.n	800176e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800175a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d03c      	beq.n	80017dc <HAL_RCC_OscConfig+0x2f4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d138      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e216      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 8001778:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800177a:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fad7 	bl	8000d34 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fad2 	bl	8000d34 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1fe      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d0f1      	beq.n	800178c <HAL_RCC_OscConfig+0x2a4>
 80017a8:	e018      	b.n	80017dc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80017ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	438a      	bics	r2, r1
 80017b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff fabd 	bl	8000d34 <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fab8 	bl	8000d34 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1e4      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d1f1      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2204      	movs	r2, #4
 80017e2:	4013      	ands	r3, r2
 80017e4:	d100      	bne.n	80017e8 <HAL_RCC_OscConfig+0x300>
 80017e6:	e0c7      	b.n	8001978 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e8:	231f      	movs	r3, #31
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2238      	movs	r2, #56	@ 0x38
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d11f      	bne.n	800183c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_RCC_OscConfig+0x330>)
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d100      	bne.n	8001808 <HAL_RCC_OscConfig+0x320>
 8001806:	e0b7      	b.n	8001978 <HAL_RCC_OscConfig+0x490>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d000      	beq.n	8001812 <HAL_RCC_OscConfig+0x32a>
 8001810:	e0b2      	b.n	8001978 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c2      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	40021000 	.word	0x40021000
 800181c:	fffeffff 	.word	0xfffeffff
 8001820:	fffbffff 	.word	0xfffbffff
 8001824:	ffff80ff 	.word	0xffff80ff
 8001828:	ffffc7ff 	.word	0xffffc7ff
 800182c:	00f42400 	.word	0x00f42400
 8001830:	20000020 	.word	0x20000020
 8001834:	20000024 	.word	0x20000024
 8001838:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800183c:	4bb5      	ldr	r3, [pc, #724]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 800183e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	055b      	lsls	r3, r3, #21
 8001844:	4013      	ands	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_RCC_OscConfig+0x364>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x366>
 800184c:	2300      	movs	r3, #0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d011      	beq.n	8001876 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4bb0      	ldr	r3, [pc, #704]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001856:	4baf      	ldr	r3, [pc, #700]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	0549      	lsls	r1, r1, #21
 800185c:	430a      	orrs	r2, r1
 800185e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001860:	4bac      	ldr	r3, [pc, #688]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	055b      	lsls	r3, r3, #21
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800186e:	231f      	movs	r3, #31
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001876:	4ba8      	ldr	r3, [pc, #672]	@ (8001b18 <HAL_RCC_OscConfig+0x630>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d11a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001882:	4ba5      	ldr	r3, [pc, #660]	@ (8001b18 <HAL_RCC_OscConfig+0x630>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4ba4      	ldr	r3, [pc, #656]	@ (8001b18 <HAL_RCC_OscConfig+0x630>)
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	0049      	lsls	r1, r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001890:	f7ff fa50 	bl	8000d34 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fa4b 	bl	8000d34 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e177      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <HAL_RCC_OscConfig+0x630>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x3e6>
 80018c0:	4b94      	ldr	r3, [pc, #592]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018c4:	4b93      	ldr	r3, [pc, #588]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x420>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x408>
 80018d6:	4b8f      	ldr	r3, [pc, #572]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018da:	4b8e      	ldr	r3, [pc, #568]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018dc:	2104      	movs	r1, #4
 80018de:	430a      	orrs	r2, r1
 80018e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0x420>
 80018f0:	4b88      	ldr	r3, [pc, #544]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018f4:	4b87      	ldr	r3, [pc, #540]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	438a      	bics	r2, r1
 80018fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018fc:	4b85      	ldr	r3, [pc, #532]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80018fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001900:	4b84      	ldr	r3, [pc, #528]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001902:	2104      	movs	r1, #4
 8001904:	438a      	bics	r2, r1
 8001906:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d014      	beq.n	800193a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fa10 	bl	8000d34 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001918:	e009      	b.n	800192e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff fa0b 	bl	8000d34 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a7d      	ldr	r2, [pc, #500]	@ (8001b1c <HAL_RCC_OscConfig+0x634>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e136      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b79      	ldr	r3, [pc, #484]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x432>
 8001938:	e013      	b.n	8001962 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f9fb 	bl	8000d34 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001942:	e009      	b.n	8001958 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff f9f6 	bl	8000d34 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a73      	ldr	r2, [pc, #460]	@ (8001b1c <HAL_RCC_OscConfig+0x634>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e121      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001958:	4b6e      	ldr	r3, [pc, #440]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 800195a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195c:	2202      	movs	r2, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001962:	231f      	movs	r3, #31
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	4b69      	ldr	r3, [pc, #420]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 800196e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001970:	4b68      	ldr	r3, [pc, #416]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001972:	496b      	ldr	r1, [pc, #428]	@ (8001b20 <HAL_RCC_OscConfig+0x638>)
 8001974:	400a      	ands	r2, r1
 8001976:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2220      	movs	r2, #32
 800197e:	4013      	ands	r3, r2
 8001980:	d039      	beq.n	80019f6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800198a:	4b62      	ldr	r3, [pc, #392]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b61      	ldr	r3, [pc, #388]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	03c9      	lsls	r1, r1, #15
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f9cc 	bl	8000d34 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a2:	f7ff f9c7 	bl	8000d34 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0f3      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019b4:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	041b      	lsls	r3, r3, #16
 80019bc:	4013      	ands	r3, r2
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4ba>
 80019c0:	e019      	b.n	80019f6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019c2:	4b54      	ldr	r3, [pc, #336]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b53      	ldr	r3, [pc, #332]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80019c8:	4956      	ldr	r1, [pc, #344]	@ (8001b24 <HAL_RCC_OscConfig+0x63c>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff f9b1 	bl	8000d34 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d8:	f7ff f9ac 	bl	8000d34 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0d8      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d100      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
 80019fe:	e0cc      	b.n	8001b9a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2238      	movs	r2, #56	@ 0x38
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x526>
 8001a0c:	e07b      	b.n	8001b06 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d156      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a1c:	4942      	ldr	r1, [pc, #264]	@ (8001b28 <HAL_RCC_OscConfig+0x640>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f987 	bl	8000d34 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f982 	bl	8000d34 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0ae      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3e:	4b35      	ldr	r3, [pc, #212]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	049b      	lsls	r3, r3, #18
 8001a46:	4013      	ands	r3, r2
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4a:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	4a37      	ldr	r2, [pc, #220]	@ (8001b2c <HAL_RCC_OscConfig+0x644>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a76:	431a      	orrs	r2, r3
 8001a78:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a84:	2180      	movs	r1, #128	@ 0x80
 8001a86:	0449      	lsls	r1, r1, #17
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a8c:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001a92:	2180      	movs	r1, #128	@ 0x80
 8001a94:	0549      	lsls	r1, r1, #21
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f94b 	bl	8000d34 <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f946 	bl	8000d34 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e072      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	049b      	lsls	r3, r3, #18
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x5bc>
 8001ac2:	e06a      	b.n	8001b9a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001aca:	4917      	ldr	r1, [pc, #92]	@ (8001b28 <HAL_RCC_OscConfig+0x640>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f930 	bl	8000d34 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f92b 	bl	8000d34 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e057      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_OscConfig+0x62c>)
 8001afe:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <HAL_RCC_OscConfig+0x648>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	e049      	b.n	8001b9a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e044      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	efffffff 	.word	0xefffffff
 8001b24:	ffbfffff 	.word	0xffbfffff
 8001b28:	feffffff 	.word	0xfeffffff
 8001b2c:	11c1808c 	.word	0x11c1808c
 8001b30:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x6bc>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d126      	bne.n	8001b96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2270      	movs	r2, #112	@ 0x70
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d11f      	bne.n	8001b96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	23fe      	movs	r3, #254	@ 0xfe
 8001b5a:	01db      	lsls	r3, r3, #7
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d116      	bne.n	8001b96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	23f8      	movs	r3, #248	@ 0xf8
 8001b6c:	039b      	lsls	r3, r3, #14
 8001b6e:	401a      	ands	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10e      	bne.n	8001b96 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	23e0      	movs	r3, #224	@ 0xe0
 8001b7c:	051b      	lsls	r3, r3, #20
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	0f5b      	lsrs	r3, r3, #29
 8001b8c:	075a      	lsls	r2, r3, #29
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b008      	add	sp, #32
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0e9      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d91e      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2207      	movs	r2, #7
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f8aa 	bl	8000d34 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be4:	e009      	b.n	8001bfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be6:	f7ff f8a5 	bl	8000d34 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0ca      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bfa:	4b67      	ldr	r3, [pc, #412]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2207      	movs	r2, #7
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d015      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d006      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c1c:	4b60      	ldr	r3, [pc, #384]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4b5f      	ldr	r3, [pc, #380]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	21e0      	movs	r1, #224	@ 0xe0
 8001c24:	01c9      	lsls	r1, r1, #7
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001da4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d057      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c50:	4b53      	ldr	r3, [pc, #332]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d12b      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e097      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	049b      	lsls	r3, r3, #18
 8001c70:	4013      	ands	r3, r2
 8001c72:	d11f      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e08b      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c80:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d113      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e07f      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c98:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e074      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e06d      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2207      	movs	r2, #7
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f834 	bl	8000d34 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7ff f82f 	bl	8000d34 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e054      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2238      	movs	r2, #56	@ 0x38
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1ec      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	4013      	ands	r3, r2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d21e      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d18:	f7ff f80c 	bl	8000d34 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f7ff f807 	bl	8000d34 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e02c      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4a15      	ldr	r2, [pc, #84]	@ (8001da8 <HAL_RCC_ClockConfig+0x200>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d62:	f000 f829 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d66:	0001      	movs	r1, r0
 8001d68:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	220f      	movs	r2, #15
 8001d70:	401a      	ands	r2, r3
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_RCC_ClockConfig+0x204>)
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	58d3      	ldr	r3, [r2, r3]
 8001d78:	221f      	movs	r2, #31
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	40da      	lsrs	r2, r3
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x208>)
 8001d82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_ClockConfig+0x20c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7fe ff77 	bl	8000c7c <HAL_InitTick>
 8001d8e:	0003      	movs	r3, r0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	00001388 	.word	0x00001388
 8001da0:	40021000 	.word	0x40021000
 8001da4:	fffff0ff 	.word	0xfffff0ff
 8001da8:	ffff8fff 	.word	0xffff8fff
 8001dac:	08004b20 	.word	0x08004b20
 8001db0:	20000020 	.word	0x20000020
 8001db4:	20000024 	.word	0x20000024

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2238      	movs	r2, #56	@ 0x38
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d10f      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dc8:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0adb      	lsrs	r3, r3, #11
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	4835      	ldr	r0, [pc, #212]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dde:	f7fe f991 	bl	8000104 <__udivsi3>
 8001de2:	0003      	movs	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e05d      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2238      	movs	r2, #56	@ 0x38
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b30      	ldr	r3, [pc, #192]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e054      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2238      	movs	r2, #56	@ 0x38
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d138      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e06:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	2207      	movs	r2, #7
 8001e18:	4013      	ands	r3, r2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d10d      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4824      	ldr	r0, [pc, #144]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e28:	f7fe f96c 	bl	8000104 <__udivsi3>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	0019      	movs	r1, r3
 8001e30:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	227f      	movs	r2, #127	@ 0x7f
 8001e38:	4013      	ands	r3, r2
 8001e3a:	434b      	muls	r3, r1
 8001e3c:	617b      	str	r3, [r7, #20]
        break;
 8001e3e:	e00d      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	481c      	ldr	r0, [pc, #112]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e44:	f7fe f95e 	bl	8000104 <__udivsi3>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	227f      	movs	r2, #127	@ 0x7f
 8001e54:	4013      	ands	r3, r2
 8001e56:	434b      	muls	r3, r1
 8001e58:	617b      	str	r3, [r7, #20]
        break;
 8001e5a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0f5b      	lsrs	r3, r3, #29
 8001e62:	2207      	movs	r2, #7
 8001e64:	4013      	ands	r3, r2
 8001e66:	3301      	adds	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7fe f949 	bl	8000104 <__udivsi3>
 8001e72:	0003      	movs	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e015      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2238      	movs	r2, #56	@ 0x38
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d103      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2238      	movs	r2, #56	@ 0x38
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b18      	cmp	r3, #24
 8001e96:	d103      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e98:	23fa      	movs	r3, #250	@ 0xfa
 8001e9a:	01db      	lsls	r3, r3, #7
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e001      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ea4:	693b      	ldr	r3, [r7, #16]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b006      	add	sp, #24
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	@ (8001ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	20000020 	.word	0x20000020

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ed4:	f7ff fff2 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ed8:	0004      	movs	r4, r0
 8001eda:	f7ff faf9 	bl	80014d0 <LL_RCC_GetAPB1Prescaler>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	0b1a      	lsrs	r2, r3, #12
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	58d3      	ldr	r3, [r2, r3]
 8001ee8:	221f      	movs	r2, #31
 8001eea:	4013      	ands	r3, r2
 8001eec:	40dc      	lsrs	r4, r3
 8001eee:	0023      	movs	r3, r4
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	08004b60 	.word	0x08004b60

08001efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f04:	2313      	movs	r3, #19
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f20:	e0ad      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2011      	movs	r0, #17
 8001f24:	183b      	adds	r3, r7, r0
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	055b      	lsls	r3, r3, #21
 8001f32:	4013      	ands	r3, r2
 8001f34:	d110      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b44      	ldr	r3, [pc, #272]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f3a:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	0549      	lsls	r1, r1, #21
 8001f40:	430a      	orrs	r2, r1
 8001f42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f44:	4b40      	ldr	r3, [pc, #256]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	055b      	lsls	r3, r3, #21
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	183b      	adds	r3, r7, r0
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4b3c      	ldr	r3, [pc, #240]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0049      	lsls	r1, r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f66:	f7fe fee5 	bl	8000d34 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe fee0 	bl	8000d34 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d904      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f7e:	2313      	movs	r3, #19
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2203      	movs	r2, #3
 8001f84:	701a      	strb	r2, [r3, #0]
        break;
 8001f86:	e005      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0ed      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f94:	2313      	movs	r3, #19
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d15e      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fa2:	23c0      	movs	r3, #192	@ 0xc0
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d014      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fca:	2180      	movs	r1, #128	@ 0x80
 8001fcc:	0249      	lsls	r1, r1, #9
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fd8:	491e      	ldr	r1, [pc, #120]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d016      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fea2 	bl	8000d34 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	e00c      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fe9d 	bl	8000d34 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	4a15      	ldr	r2, [pc, #84]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d904      	bls.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002006:	2313      	movs	r3, #19
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2203      	movs	r2, #3
 800200c:	701a      	strb	r2, [r3, #0]
            break;
 800200e:	e004      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d0ed      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800201a:	2313      	movs	r3, #19
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002034:	430a      	orrs	r2, r1
 8002036:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002038:	e016      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800203a:	2312      	movs	r3, #18
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2213      	movs	r2, #19
 8002040:	18ba      	adds	r2, r7, r2
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e00f      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	fffffcff 	.word	0xfffffcff
 8002054:	fffeffff 	.word	0xfffeffff
 8002058:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205c:	2312      	movs	r3, #18
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2213      	movs	r2, #19
 8002062:	18ba      	adds	r2, r7, r2
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002068:	2311      	movs	r3, #17
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4bb6      	ldr	r3, [pc, #728]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002076:	4bb5      	ldr	r3, [pc, #724]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	49b5      	ldr	r1, [pc, #724]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800207a:	400a      	ands	r2, r1
 800207c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2201      	movs	r2, #1
 8002084:	4013      	ands	r3, r2
 8002086:	d009      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002088:	4bb0      	ldr	r3, [pc, #704]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	2203      	movs	r2, #3
 800208e:	4393      	bics	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4bad      	ldr	r3, [pc, #692]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002098:	430a      	orrs	r2, r1
 800209a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a6:	4ba9      	ldr	r3, [pc, #676]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	220c      	movs	r2, #12
 80020ac:	4393      	bics	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4ba5      	ldr	r3, [pc, #660]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2204      	movs	r2, #4
 80020c0:	4013      	ands	r3, r2
 80020c2:	d009      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c4:	4ba1      	ldr	r3, [pc, #644]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	2230      	movs	r2, #48	@ 0x30
 80020ca:	4393      	bics	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b9e      	ldr	r3, [pc, #632]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d4:	430a      	orrs	r2, r1
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	4013      	ands	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e2:	4b9a      	ldr	r3, [pc, #616]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e6:	4a9b      	ldr	r2, [pc, #620]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	4b96      	ldr	r3, [pc, #600]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f2:	430a      	orrs	r2, r1
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	015b      	lsls	r3, r3, #5
 80020fe:	4013      	ands	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002102:	4b92      	ldr	r3, [pc, #584]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	4a94      	ldr	r2, [pc, #592]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002108:	4013      	ands	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	4b8e      	ldr	r3, [pc, #568]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002112:	430a      	orrs	r2, r1
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4013      	ands	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002122:	4b8a      	ldr	r3, [pc, #552]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	4a8d      	ldr	r2, [pc, #564]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002130:	4b86      	ldr	r3, [pc, #536]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002132:	430a      	orrs	r2, r1
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4013      	ands	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002142:	4b82      	ldr	r3, [pc, #520]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	4a86      	ldr	r2, [pc, #536]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002150:	4b7e      	ldr	r3, [pc, #504]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002152:	430a      	orrs	r2, r1
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2220      	movs	r2, #32
 800215c:	4013      	ands	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002160:	4b7a      	ldr	r3, [pc, #488]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	4a7f      	ldr	r2, [pc, #508]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002166:	4013      	ands	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	4b77      	ldr	r3, [pc, #476]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002170:	430a      	orrs	r2, r1
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2240      	movs	r2, #64	@ 0x40
 800217a:	4013      	ands	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800217e:	4b73      	ldr	r3, [pc, #460]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	4a79      	ldr	r2, [pc, #484]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	4b6f      	ldr	r3, [pc, #444]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800218e:	430a      	orrs	r2, r1
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	4013      	ands	r3, r2
 800219c:	d015      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800219e:	4b6b      	ldr	r3, [pc, #428]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	0899      	lsrs	r1, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021aa:	4b68      	ldr	r3, [pc, #416]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	05db      	lsls	r3, r3, #23
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d106      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021bc:	4b63      	ldr	r3, [pc, #396]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b62      	ldr	r3, [pc, #392]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c2:	2180      	movs	r1, #128	@ 0x80
 80021c4:	0249      	lsls	r1, r1, #9
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	4013      	ands	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021da:	2240      	movs	r2, #64	@ 0x40
 80021dc:	4393      	bics	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	039b      	lsls	r3, r3, #14
 80021f2:	4013      	ands	r3, r2
 80021f4:	d016      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021f6:	4b55      	ldr	r3, [pc, #340]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002204:	4b51      	ldr	r3, [pc, #324]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002206:	430a      	orrs	r2, r1
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	03db      	lsls	r3, r3, #15
 8002212:	429a      	cmp	r2, r3
 8002214:	d106      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002216:	4b4d      	ldr	r3, [pc, #308]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0449      	lsls	r1, r1, #17
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	03db      	lsls	r3, r3, #15
 800222c:	4013      	ands	r3, r2
 800222e:	d016      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002230:	4b46      	ldr	r3, [pc, #280]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	4a4e      	ldr	r2, [pc, #312]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800223e:	4b43      	ldr	r3, [pc, #268]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002240:	430a      	orrs	r2, r1
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	045b      	lsls	r3, r3, #17
 800224c:	429a      	cmp	r2, r3
 800224e:	d106      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002250:	4b3e      	ldr	r3, [pc, #248]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	0449      	lsls	r1, r1, #17
 800225a:	430a      	orrs	r2, r1
 800225c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	4013      	ands	r3, r2
 8002268:	d014      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800226a:	4b38      	ldr	r3, [pc, #224]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	2203      	movs	r2, #3
 8002270:	4393      	bics	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227a:	430a      	orrs	r2, r1
 800227c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d106      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002286:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800228c:	2180      	movs	r1, #128	@ 0x80
 800228e:	0249      	lsls	r1, r1, #9
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	4013      	ands	r3, r2
 800229e:	d014      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	220c      	movs	r2, #12
 80022a6:	4393      	bics	r3, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d106      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022bc:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	0249      	lsls	r1, r1, #9
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	045b      	lsls	r3, r3, #17
 80022d2:	4013      	ands	r3, r2
 80022d4:	d016      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	4a22      	ldr	r2, [pc, #136]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	019b      	lsls	r3, r3, #6
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022fc:	2180      	movs	r1, #128	@ 0x80
 80022fe:	0449      	lsls	r1, r1, #17
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	049b      	lsls	r3, r3, #18
 800230c:	4013      	ands	r3, r2
 800230e:	d016      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	4a10      	ldr	r2, [pc, #64]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002320:	430a      	orrs	r2, r1
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	0449      	lsls	r1, r1, #17
 800233a:	430a      	orrs	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800233e:	2312      	movs	r3, #18
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	781b      	ldrb	r3, [r3, #0]
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b006      	add	sp, #24
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	efffffff 	.word	0xefffffff
 8002354:	fffff3ff 	.word	0xfffff3ff
 8002358:	fffffcff 	.word	0xfffffcff
 800235c:	fff3ffff 	.word	0xfff3ffff
 8002360:	ffcfffff 	.word	0xffcfffff
 8002364:	ffffcfff 	.word	0xffffcfff
 8002368:	ffff3fff 	.word	0xffff3fff
 800236c:	ffbfffff 	.word	0xffbfffff
 8002370:	feffffff 	.word	0xfeffffff

08002374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e046      	b.n	8002414 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2288      	movs	r2, #136	@ 0x88
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2284      	movs	r2, #132	@ 0x84
 8002394:	2100      	movs	r1, #0
 8002396:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f7fe fb6a 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2288      	movs	r2, #136	@ 0x88
 80023a4:	2124      	movs	r1, #36	@ 0x24
 80023a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	438a      	bics	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 ffd2 	bl	800336c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fc78 	bl	8002cc0 <UART_SetConfig>
 80023d0:	0003      	movs	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01c      	b.n	8002414 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	490d      	ldr	r1, [pc, #52]	@ (800241c <HAL_UART_Init+0xa8>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	212a      	movs	r1, #42	@ 0x2a
 80023f6:	438a      	bics	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f001 f861 	bl	80034d4 <UART_CheckIdleState>
 8002412:	0003      	movs	r3, r0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	ffffb7ff 	.word	0xffffb7ff

08002420 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	@ 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	1dbb      	adds	r3, r7, #6
 800242c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2288      	movs	r2, #136	@ 0x88
 8002432:	589b      	ldr	r3, [r3, r2]
 8002434:	2b20      	cmp	r3, #32
 8002436:	d000      	beq.n	800243a <HAL_UART_Transmit_IT+0x1a>
 8002438:	e08d      	b.n	8002556 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_UART_Transmit_IT+0x28>
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e085      	b.n	8002558 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	429a      	cmp	r2, r3
 8002456:	d109      	bne.n	800246c <HAL_UART_Transmit_IT+0x4c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d001      	beq.n	800246c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e075      	b.n	8002558 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1dba      	adds	r2, r7, #6
 8002476:	2154      	movs	r1, #84	@ 0x54
 8002478:	8812      	ldrh	r2, [r2, #0]
 800247a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1dba      	adds	r2, r7, #6
 8002480:	2156      	movs	r1, #86	@ 0x56
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2290      	movs	r2, #144	@ 0x90
 8002490:	2100      	movs	r1, #0
 8002492:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2288      	movs	r2, #136	@ 0x88
 8002498:	2121      	movs	r1, #33	@ 0x21
 800249a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	059b      	lsls	r3, r3, #22
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d12a      	bne.n	80024fe <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	015b      	lsls	r3, r3, #5
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_UART_Transmit_IT+0xa4>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a28      	ldr	r2, [pc, #160]	@ (8002560 <HAL_UART_Transmit_IT+0x140>)
 80024c0:	679a      	str	r2, [r3, #120]	@ 0x78
 80024c2:	e002      	b.n	80024ca <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a27      	ldr	r2, [pc, #156]	@ (8002564 <HAL_UART_Transmit_IT+0x144>)
 80024c8:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ca:	f3ef 8310 	mrs	r3, PRIMASK
 80024ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80024d0:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d4:	2301      	movs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f383 8810 	msr	PRIMASK, r3
}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2180      	movs	r1, #128	@ 0x80
 80024ec:	0409      	lsls	r1, r1, #16
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	f383 8810 	msr	PRIMASK, r3
}
 80024fc:	e029      	b.n	8002552 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	015b      	lsls	r3, r3, #5
 8002506:	429a      	cmp	r2, r3
 8002508:	d107      	bne.n	800251a <HAL_UART_Transmit_IT+0xfa>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <HAL_UART_Transmit_IT+0x148>)
 8002516:	679a      	str	r2, [r3, #120]	@ 0x78
 8002518:	e002      	b.n	8002520 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a13      	ldr	r2, [pc, #76]	@ (800256c <HAL_UART_Transmit_IT+0x14c>)
 800251e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002520:	f3ef 8310 	mrs	r3, PRIMASK
 8002524:	613b      	str	r3, [r7, #16]
  return(result);
 8002526:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800252a:	2301      	movs	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f383 8810 	msr	PRIMASK, r3
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2180      	movs	r1, #128	@ 0x80
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f383 8810 	msr	PRIMASK, r3
}
 8002550:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b00c      	add	sp, #48	@ 0x30
 800255e:	bd80      	pop	{r7, pc}
 8002560:	08003ca9 	.word	0x08003ca9
 8002564:	08003bbd 	.word	0x08003bbd
 8002568:	08003aff 	.word	0x08003aff
 800256c:	08003a4b 	.word	0x08003a4b

08002570 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	228c      	movs	r2, #140	@ 0x8c
 8002582:	589b      	ldr	r3, [r3, r2]
 8002584:	2b20      	cmp	r3, #32
 8002586:	d14f      	bne.n	8002628 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_UART_Receive_IT+0x26>
 800258e:	1dbb      	adds	r3, r7, #6
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e047      	b.n	800262a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d109      	bne.n	80025ba <HAL_UART_Receive_IT+0x4a>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d001      	beq.n	80025ba <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e037      	b.n	800262a <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002634 <HAL_UART_Receive_IT+0xc4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_UART_Receive_IT+0xa6>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002638 <HAL_UART_Receive_IT+0xc8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d020      	beq.n	8002616 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	4013      	ands	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e2:	f3ef 8310 	mrs	r3, PRIMASK
 80025e6:	613b      	str	r3, [r7, #16]
  return(result);
 80025e8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	2301      	movs	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f383 8810 	msr	PRIMASK, r3
}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	04c9      	lsls	r1, r1, #19
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	0018      	movs	r0, r3
 8002620:	f001 f872 	bl	8003708 <UART_Start_Receive_IT>
 8002624:	0003      	movs	r3, r0
 8002626:	e000      	b.n	800262a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b008      	add	sp, #32
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	40008000 	.word	0x40008000
 8002638:	40008400 	.word	0x40008400

0800263c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800263c:	b5b0      	push	{r4, r5, r7, lr}
 800263e:	b0aa      	sub	sp, #168	@ 0xa8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	22a4      	movs	r2, #164	@ 0xa4
 800264c:	18b9      	adds	r1, r7, r2
 800264e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	20a0      	movs	r0, #160	@ 0xa0
 8002658:	1839      	adds	r1, r7, r0
 800265a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	249c      	movs	r4, #156	@ 0x9c
 8002664:	1939      	adds	r1, r7, r4
 8002666:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002668:	0011      	movs	r1, r2
 800266a:	18bb      	adds	r3, r7, r2
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4aa2      	ldr	r2, [pc, #648]	@ (80028f8 <HAL_UART_IRQHandler+0x2bc>)
 8002670:	4013      	ands	r3, r2
 8002672:	2298      	movs	r2, #152	@ 0x98
 8002674:	18bd      	adds	r5, r7, r2
 8002676:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002678:	18bb      	adds	r3, r7, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11a      	bne.n	80026b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002680:	187b      	adds	r3, r7, r1
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2220      	movs	r2, #32
 8002686:	4013      	ands	r3, r2
 8002688:	d015      	beq.n	80026b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800268a:	183b      	adds	r3, r7, r0
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d105      	bne.n	80026a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002694:	193b      	adds	r3, r7, r4
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	4013      	ands	r3, r2
 800269e:	d00a      	beq.n	80026b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d100      	bne.n	80026aa <HAL_UART_IRQHandler+0x6e>
 80026a8:	e2dc      	b.n	8002c64 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	0010      	movs	r0, r2
 80026b2:	4798      	blx	r3
      }
      return;
 80026b4:	e2d6      	b.n	8002c64 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026b6:	2398      	movs	r3, #152	@ 0x98
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <HAL_UART_IRQHandler+0x86>
 80026c0:	e122      	b.n	8002908 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80026c2:	239c      	movs	r3, #156	@ 0x9c
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a8c      	ldr	r2, [pc, #560]	@ (80028fc <HAL_UART_IRQHandler+0x2c0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	d106      	bne.n	80026dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80026ce:	23a0      	movs	r3, #160	@ 0xa0
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a8a      	ldr	r2, [pc, #552]	@ (8002900 <HAL_UART_IRQHandler+0x2c4>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_UART_IRQHandler+0xa0>
 80026da:	e115      	b.n	8002908 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026dc:	23a4      	movs	r3, #164	@ 0xa4
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d012      	beq.n	800270e <HAL_UART_IRQHandler+0xd2>
 80026e8:	23a0      	movs	r3, #160	@ 0xa0
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	d00b      	beq.n	800270e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2290      	movs	r2, #144	@ 0x90
 8002702:	589b      	ldr	r3, [r3, r2]
 8002704:	2201      	movs	r2, #1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2190      	movs	r1, #144	@ 0x90
 800270c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800270e:	23a4      	movs	r3, #164	@ 0xa4
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d011      	beq.n	800273e <HAL_UART_IRQHandler+0x102>
 800271a:	239c      	movs	r3, #156	@ 0x9c
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2290      	movs	r2, #144	@ 0x90
 8002732:	589b      	ldr	r3, [r3, r2]
 8002734:	2204      	movs	r2, #4
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2190      	movs	r1, #144	@ 0x90
 800273c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800273e:	23a4      	movs	r3, #164	@ 0xa4
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2204      	movs	r2, #4
 8002746:	4013      	ands	r3, r2
 8002748:	d011      	beq.n	800276e <HAL_UART_IRQHandler+0x132>
 800274a:	239c      	movs	r3, #156	@ 0x9c
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2204      	movs	r2, #4
 800275c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2290      	movs	r2, #144	@ 0x90
 8002762:	589b      	ldr	r3, [r3, r2]
 8002764:	2202      	movs	r2, #2
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2190      	movs	r1, #144	@ 0x90
 800276c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800276e:	23a4      	movs	r3, #164	@ 0xa4
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2208      	movs	r2, #8
 8002776:	4013      	ands	r3, r2
 8002778:	d017      	beq.n	80027aa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800277a:	23a0      	movs	r3, #160	@ 0xa0
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2220      	movs	r2, #32
 8002782:	4013      	ands	r3, r2
 8002784:	d105      	bne.n	8002792 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002786:	239c      	movs	r3, #156	@ 0x9c
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5b      	ldr	r2, [pc, #364]	@ (80028fc <HAL_UART_IRQHandler+0x2c0>)
 800278e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002790:	d00b      	beq.n	80027aa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2208      	movs	r2, #8
 8002798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2290      	movs	r2, #144	@ 0x90
 800279e:	589b      	ldr	r3, [r3, r2]
 80027a0:	2208      	movs	r2, #8
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2190      	movs	r1, #144	@ 0x90
 80027a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027aa:	23a4      	movs	r3, #164	@ 0xa4
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4013      	ands	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1a4>
 80027b8:	23a0      	movs	r3, #160	@ 0xa0
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	04db      	lsls	r3, r3, #19
 80027c2:	4013      	ands	r3, r2
 80027c4:	d00c      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2290      	movs	r2, #144	@ 0x90
 80027d4:	589b      	ldr	r3, [r3, r2]
 80027d6:	2220      	movs	r2, #32
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2190      	movs	r1, #144	@ 0x90
 80027de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2290      	movs	r2, #144	@ 0x90
 80027e4:	589b      	ldr	r3, [r3, r2]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d100      	bne.n	80027ec <HAL_UART_IRQHandler+0x1b0>
 80027ea:	e23d      	b.n	8002c68 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027ec:	23a4      	movs	r3, #164	@ 0xa4
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2220      	movs	r2, #32
 80027f4:	4013      	ands	r3, r2
 80027f6:	d015      	beq.n	8002824 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027f8:	23a0      	movs	r3, #160	@ 0xa0
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2220      	movs	r2, #32
 8002800:	4013      	ands	r3, r2
 8002802:	d106      	bne.n	8002812 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002804:	239c      	movs	r3, #156	@ 0x9c
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	055b      	lsls	r3, r3, #21
 800280e:	4013      	ands	r3, r2
 8002810:	d008      	beq.n	8002824 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	0010      	movs	r0, r2
 8002822:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2290      	movs	r2, #144	@ 0x90
 8002828:	589b      	ldr	r3, [r3, r2]
 800282a:	2194      	movs	r1, #148	@ 0x94
 800282c:	187a      	adds	r2, r7, r1
 800282e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2240      	movs	r2, #64	@ 0x40
 8002838:	4013      	ands	r3, r2
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d004      	beq.n	8002848 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800283e:	187b      	adds	r3, r7, r1
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2228      	movs	r2, #40	@ 0x28
 8002844:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002846:	d04c      	beq.n	80028e2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f001 f880 	bl	8003950 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2240      	movs	r2, #64	@ 0x40
 8002858:	4013      	ands	r3, r2
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d13c      	bne.n	80028d8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285e:	f3ef 8310 	mrs	r3, PRIMASK
 8002862:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002866:	2090      	movs	r0, #144	@ 0x90
 8002868:	183a      	adds	r2, r7, r0
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002872:	f383 8810 	msr	PRIMASK, r3
}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2140      	movs	r1, #64	@ 0x40
 8002884:	438a      	bics	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	183b      	adds	r3, r7, r0
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002890:	f383 8810 	msr	PRIMASK, r3
}
 8002894:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	589b      	ldr	r3, [r3, r2]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	589b      	ldr	r3, [r3, r2]
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <HAL_UART_IRQHandler+0x2c8>)
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	589b      	ldr	r3, [r3, r2]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe fbc1 	bl	8001038 <HAL_DMA_Abort_IT>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d01c      	beq.n	80028f4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2280      	movs	r2, #128	@ 0x80
 80028be:	589b      	ldr	r3, [r3, r2]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	5852      	ldr	r2, [r2, r1]
 80028c8:	0010      	movs	r0, r2
 80028ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	e012      	b.n	80028f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f9e1 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d6:	e00d      	b.n	80028f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f9dc 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	e008      	b.n	80028f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f9d7 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2290      	movs	r2, #144	@ 0x90
 80028ee:	2100      	movs	r1, #0
 80028f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028f2:	e1b9      	b.n	8002c68 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	46c0      	nop			@ (mov r8, r8)
    return;
 80028f6:	e1b7      	b.n	8002c68 <HAL_UART_IRQHandler+0x62c>
 80028f8:	0000080f 	.word	0x0000080f
 80028fc:	10000001 	.word	0x10000001
 8002900:	04000120 	.word	0x04000120
 8002904:	08003a1d 	.word	0x08003a1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d000      	beq.n	8002912 <HAL_UART_IRQHandler+0x2d6>
 8002910:	e13e      	b.n	8002b90 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002912:	23a4      	movs	r3, #164	@ 0xa4
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	4013      	ands	r3, r2
 800291c:	d100      	bne.n	8002920 <HAL_UART_IRQHandler+0x2e4>
 800291e:	e137      	b.n	8002b90 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002920:	23a0      	movs	r3, #160	@ 0xa0
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	4013      	ands	r3, r2
 800292a:	d100      	bne.n	800292e <HAL_UART_IRQHandler+0x2f2>
 800292c:	e130      	b.n	8002b90 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2210      	movs	r2, #16
 8002934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2240      	movs	r2, #64	@ 0x40
 800293e:	4013      	ands	r3, r2
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d000      	beq.n	8002946 <HAL_UART_IRQHandler+0x30a>
 8002944:	e0a4      	b.n	8002a90 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	589b      	ldr	r3, [r3, r2]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	217e      	movs	r1, #126	@ 0x7e
 8002952:	187b      	adds	r3, r7, r1
 8002954:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002956:	187b      	adds	r3, r7, r1
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d100      	bne.n	8002960 <HAL_UART_IRQHandler+0x324>
 800295e:	e185      	b.n	8002c6c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	225c      	movs	r2, #92	@ 0x5c
 8002964:	5a9b      	ldrh	r3, [r3, r2]
 8002966:	187a      	adds	r2, r7, r1
 8002968:	8812      	ldrh	r2, [r2, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d300      	bcc.n	8002970 <HAL_UART_IRQHandler+0x334>
 800296e:	e17d      	b.n	8002c6c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	187a      	adds	r2, r7, r1
 8002974:	215e      	movs	r1, #94	@ 0x5e
 8002976:	8812      	ldrh	r2, [r2, #0]
 8002978:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	@ 0x80
 800297e:	589b      	ldr	r3, [r3, r2]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2220      	movs	r2, #32
 8002986:	4013      	ands	r3, r2
 8002988:	d170      	bne.n	8002a6c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298a:	f3ef 8310 	mrs	r3, PRIMASK
 800298e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002992:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002994:	2301      	movs	r3, #1
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	f383 8810 	msr	PRIMASK, r3
}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	49b4      	ldr	r1, [pc, #720]	@ (8002c7c <HAL_UART_IRQHandler+0x640>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029bc:	f3ef 8310 	mrs	r3, PRIMASK
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80029c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80029c6:	2301      	movs	r3, #1
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	438a      	bics	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e8:	f383 8810 	msr	PRIMASK, r3
}
 80029ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ee:	f3ef 8310 	mrs	r3, PRIMASK
 80029f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80029f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80029f8:	2301      	movs	r3, #1
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	438a      	bics	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a16:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	228c      	movs	r2, #140	@ 0x8c
 8002a24:	2120      	movs	r1, #32
 8002a26:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a38:	2301      	movs	r3, #1
 8002a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2110      	movs	r1, #16
 8002a50:	438a      	bics	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	589b      	ldr	r3, [r3, r2]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fe fa86 	bl	8000f78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	225c      	movs	r2, #92	@ 0x5c
 8002a76:	5a9a      	ldrh	r2, [r3, r2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	215e      	movs	r1, #94	@ 0x5e
 8002a7c:	5a5b      	ldrh	r3, [r3, r1]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f90d 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a8e:	e0ed      	b.n	8002c6c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	225c      	movs	r2, #92	@ 0x5c
 8002a94:	5a99      	ldrh	r1, [r3, r2]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	225e      	movs	r2, #94	@ 0x5e
 8002a9a:	5a9b      	ldrh	r3, [r3, r2]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	208e      	movs	r0, #142	@ 0x8e
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	1a8a      	subs	r2, r1, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	225e      	movs	r2, #94	@ 0x5e
 8002aaa:	5a9b      	ldrh	r3, [r3, r2]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d100      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x478>
 8002ab2:	e0dd      	b.n	8002c70 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002ab4:	183b      	adds	r3, r7, r0
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d100      	bne.n	8002abe <HAL_UART_IRQHandler+0x482>
 8002abc:	e0d8      	b.n	8002c70 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ac6:	2488      	movs	r4, #136	@ 0x88
 8002ac8:	193a      	adds	r2, r7, r4
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	2301      	movs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4967      	ldr	r1, [pc, #412]	@ (8002c80 <HAL_UART_IRQHandler+0x644>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af6:	f3ef 8310 	mrs	r3, PRIMASK
 8002afa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002afc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002afe:	2484      	movs	r4, #132	@ 0x84
 8002b00:	193a      	adds	r2, r7, r4
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	2301      	movs	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f383 8810 	msr	PRIMASK, r3
}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	495a      	ldr	r1, [pc, #360]	@ (8002c84 <HAL_UART_IRQHandler+0x648>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f383 8810 	msr	PRIMASK, r3
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	228c      	movs	r2, #140	@ 0x8c
 8002b32:	2120      	movs	r1, #32
 8002b34:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b42:	f3ef 8310 	mrs	r3, PRIMASK
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4a:	2480      	movs	r4, #128	@ 0x80
 8002b4c:	193a      	adds	r2, r7, r4
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	2301      	movs	r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	f383 8810 	msr	PRIMASK, r3
}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2110      	movs	r1, #16
 8002b68:	438a      	bics	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	f383 8810 	msr	PRIMASK, r3
}
 8002b78:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f88d 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b8e:	e06f      	b.n	8002c70 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b90:	23a4      	movs	r3, #164	@ 0xa4
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	035b      	lsls	r3, r3, #13
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d010      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x584>
 8002b9e:	239c      	movs	r3, #156	@ 0x9c
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	03db      	lsls	r3, r3, #15
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2280      	movs	r2, #128	@ 0x80
 8002bb2:	0352      	lsls	r2, r2, #13
 8002bb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f001 fe47 	bl	800484c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bbe:	e05a      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002bc0:	23a4      	movs	r3, #164	@ 0xa4
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2280      	movs	r2, #128	@ 0x80
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d016      	beq.n	8002bfa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002bcc:	23a0      	movs	r3, #160	@ 0xa0
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d106      	bne.n	8002be6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002bd8:	239c      	movs	r3, #156	@ 0x9c
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d042      	beq.n	8002c74 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	4798      	blx	r3
    }
    return;
 8002bf8:	e03c      	b.n	8002c74 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bfa:	23a4      	movs	r3, #164	@ 0xa4
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	4013      	ands	r3, r2
 8002c04:	d00a      	beq.n	8002c1c <HAL_UART_IRQHandler+0x5e0>
 8002c06:	23a0      	movs	r3, #160	@ 0xa0
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2240      	movs	r2, #64	@ 0x40
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f001 f8c1 	bl	8003d9c <UART_EndTransmit_IT>
    return;
 8002c1a:	e02c      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c1c:	23a4      	movs	r3, #164	@ 0xa4
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	@ 0x80
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <HAL_UART_IRQHandler+0x606>
 8002c2a:	23a0      	movs	r3, #160	@ 0xa0
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	4013      	ands	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f001 fe16 	bl	800486c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c40:	e019      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002c42:	23a4      	movs	r3, #164	@ 0xa4
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	045b      	lsls	r3, r3, #17
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d012      	beq.n	8002c76 <HAL_UART_IRQHandler+0x63a>
 8002c50:	23a0      	movs	r3, #160	@ 0xa0
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da0d      	bge.n	8002c76 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 fdfd 	bl	800485c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c62:	e008      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
      return;
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	e006      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
    return;
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	e004      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
      return;
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	e002      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
      return;
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	e000      	b.n	8002c76 <HAL_UART_IRQHandler+0x63a>
    return;
 8002c74:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b02a      	add	sp, #168	@ 0xa8
 8002c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7c:	fffffeff 	.word	0xfffffeff
 8002c80:	fffffedf 	.word	0xfffffedf
 8002c84:	effffffe 	.word	0xeffffffe

08002c88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ca0:	46c0      	nop			@ (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	1cbb      	adds	r3, r7, #2
 8002cb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc0:	b5b0      	push	{r4, r5, r7, lr}
 8002cc2:	b090      	sub	sp, #64	@ 0x40
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc8:	231a      	movs	r3, #26
 8002cca:	2220      	movs	r2, #32
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	19db      	adds	r3, r3, r7
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ff8 <UART_SetConfig+0x338>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4abc      	ldr	r2, [pc, #752]	@ (8002ffc <UART_SetConfig+0x33c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	68d9      	ldr	r1, [r3, #12]
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	0003      	movs	r3, r0
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4ab6      	ldr	r2, [pc, #728]	@ (8003000 <UART_SetConfig+0x340>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <UART_SetConfig+0x80>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4ab4      	ldr	r2, [pc, #720]	@ (8003004 <UART_SetConfig+0x344>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4ab0      	ldr	r2, [pc, #704]	@ (8003008 <UART_SetConfig+0x348>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d52:	430b      	orrs	r3, r1
 8002d54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	4393      	bics	r3, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4aa5      	ldr	r2, [pc, #660]	@ (800300c <UART_SetConfig+0x34c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d131      	bne.n	8002dde <UART_SetConfig+0x11e>
 8002d7a:	4ba5      	ldr	r3, [pc, #660]	@ (8003010 <UART_SetConfig+0x350>)
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	2203      	movs	r2, #3
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d01d      	beq.n	8002dc2 <UART_SetConfig+0x102>
 8002d86:	d823      	bhi.n	8002dd0 <UART_SetConfig+0x110>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d00c      	beq.n	8002da6 <UART_SetConfig+0xe6>
 8002d8c:	d820      	bhi.n	8002dd0 <UART_SetConfig+0x110>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <UART_SetConfig+0xd8>
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d00e      	beq.n	8002db4 <UART_SetConfig+0xf4>
 8002d96:	e01b      	b.n	8002dd0 <UART_SetConfig+0x110>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e154      	b.n	8003050 <UART_SetConfig+0x390>
 8002da6:	231b      	movs	r3, #27
 8002da8:	2220      	movs	r2, #32
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e14d      	b.n	8003050 <UART_SetConfig+0x390>
 8002db4:	231b      	movs	r3, #27
 8002db6:	2220      	movs	r2, #32
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e146      	b.n	8003050 <UART_SetConfig+0x390>
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	19db      	adds	r3, r3, r7
 8002dca:	2208      	movs	r2, #8
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e13f      	b.n	8003050 <UART_SetConfig+0x390>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	19db      	adds	r3, r3, r7
 8002dd8:	2210      	movs	r2, #16
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	e138      	b.n	8003050 <UART_SetConfig+0x390>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a8c      	ldr	r2, [pc, #560]	@ (8003014 <UART_SetConfig+0x354>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d131      	bne.n	8002e4c <UART_SetConfig+0x18c>
 8002de8:	4b89      	ldr	r3, [pc, #548]	@ (8003010 <UART_SetConfig+0x350>)
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	220c      	movs	r2, #12
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d01d      	beq.n	8002e30 <UART_SetConfig+0x170>
 8002df4:	d823      	bhi.n	8002e3e <UART_SetConfig+0x17e>
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d00c      	beq.n	8002e14 <UART_SetConfig+0x154>
 8002dfa:	d820      	bhi.n	8002e3e <UART_SetConfig+0x17e>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <UART_SetConfig+0x146>
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d00e      	beq.n	8002e22 <UART_SetConfig+0x162>
 8002e04:	e01b      	b.n	8002e3e <UART_SetConfig+0x17e>
 8002e06:	231b      	movs	r3, #27
 8002e08:	2220      	movs	r2, #32
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	19db      	adds	r3, r3, r7
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e11d      	b.n	8003050 <UART_SetConfig+0x390>
 8002e14:	231b      	movs	r3, #27
 8002e16:	2220      	movs	r2, #32
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	19db      	adds	r3, r3, r7
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e116      	b.n	8003050 <UART_SetConfig+0x390>
 8002e22:	231b      	movs	r3, #27
 8002e24:	2220      	movs	r2, #32
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	19db      	adds	r3, r3, r7
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e10f      	b.n	8003050 <UART_SetConfig+0x390>
 8002e30:	231b      	movs	r3, #27
 8002e32:	2220      	movs	r2, #32
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	2208      	movs	r2, #8
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e108      	b.n	8003050 <UART_SetConfig+0x390>
 8002e3e:	231b      	movs	r3, #27
 8002e40:	2220      	movs	r2, #32
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	19db      	adds	r3, r3, r7
 8002e46:	2210      	movs	r2, #16
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e101      	b.n	8003050 <UART_SetConfig+0x390>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a71      	ldr	r2, [pc, #452]	@ (8003018 <UART_SetConfig+0x358>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d131      	bne.n	8002eba <UART_SetConfig+0x1fa>
 8002e56:	4b6e      	ldr	r3, [pc, #440]	@ (8003010 <UART_SetConfig+0x350>)
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	2230      	movs	r2, #48	@ 0x30
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b30      	cmp	r3, #48	@ 0x30
 8002e60:	d01d      	beq.n	8002e9e <UART_SetConfig+0x1de>
 8002e62:	d823      	bhi.n	8002eac <UART_SetConfig+0x1ec>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d00c      	beq.n	8002e82 <UART_SetConfig+0x1c2>
 8002e68:	d820      	bhi.n	8002eac <UART_SetConfig+0x1ec>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <UART_SetConfig+0x1b4>
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d00e      	beq.n	8002e90 <UART_SetConfig+0x1d0>
 8002e72:	e01b      	b.n	8002eac <UART_SetConfig+0x1ec>
 8002e74:	231b      	movs	r3, #27
 8002e76:	2220      	movs	r2, #32
 8002e78:	189b      	adds	r3, r3, r2
 8002e7a:	19db      	adds	r3, r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e0e6      	b.n	8003050 <UART_SetConfig+0x390>
 8002e82:	231b      	movs	r3, #27
 8002e84:	2220      	movs	r2, #32
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e0df      	b.n	8003050 <UART_SetConfig+0x390>
 8002e90:	231b      	movs	r3, #27
 8002e92:	2220      	movs	r2, #32
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	19db      	adds	r3, r3, r7
 8002e98:	2204      	movs	r2, #4
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e0d8      	b.n	8003050 <UART_SetConfig+0x390>
 8002e9e:	231b      	movs	r3, #27
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	19db      	adds	r3, r3, r7
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e0d1      	b.n	8003050 <UART_SetConfig+0x390>
 8002eac:	231b      	movs	r3, #27
 8002eae:	2220      	movs	r2, #32
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	19db      	adds	r3, r3, r7
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e0ca      	b.n	8003050 <UART_SetConfig+0x390>
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a57      	ldr	r2, [pc, #348]	@ (800301c <UART_SetConfig+0x35c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d106      	bne.n	8002ed2 <UART_SetConfig+0x212>
 8002ec4:	231b      	movs	r3, #27
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	189b      	adds	r3, r3, r2
 8002eca:	19db      	adds	r3, r3, r7
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e0be      	b.n	8003050 <UART_SetConfig+0x390>
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a52      	ldr	r2, [pc, #328]	@ (8003020 <UART_SetConfig+0x360>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d106      	bne.n	8002eea <UART_SetConfig+0x22a>
 8002edc:	231b      	movs	r3, #27
 8002ede:	2220      	movs	r2, #32
 8002ee0:	189b      	adds	r3, r3, r2
 8002ee2:	19db      	adds	r3, r3, r7
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e0b2      	b.n	8003050 <UART_SetConfig+0x390>
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <UART_SetConfig+0x364>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d106      	bne.n	8002f02 <UART_SetConfig+0x242>
 8002ef4:	231b      	movs	r3, #27
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	19db      	adds	r3, r3, r7
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e0a6      	b.n	8003050 <UART_SetConfig+0x390>
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3e      	ldr	r2, [pc, #248]	@ (8003000 <UART_SetConfig+0x340>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d13e      	bne.n	8002f8a <UART_SetConfig+0x2ca>
 8002f0c:	4b40      	ldr	r3, [pc, #256]	@ (8003010 <UART_SetConfig+0x350>)
 8002f0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f10:	23c0      	movs	r3, #192	@ 0xc0
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	22c0      	movs	r2, #192	@ 0xc0
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d027      	beq.n	8002f6e <UART_SetConfig+0x2ae>
 8002f1e:	22c0      	movs	r2, #192	@ 0xc0
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d82a      	bhi.n	8002f7c <UART_SetConfig+0x2bc>
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d011      	beq.n	8002f52 <UART_SetConfig+0x292>
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d822      	bhi.n	8002f7c <UART_SetConfig+0x2bc>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <UART_SetConfig+0x284>
 8002f3a:	2280      	movs	r2, #128	@ 0x80
 8002f3c:	00d2      	lsls	r2, r2, #3
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <UART_SetConfig+0x2a0>
 8002f42:	e01b      	b.n	8002f7c <UART_SetConfig+0x2bc>
 8002f44:	231b      	movs	r3, #27
 8002f46:	2220      	movs	r2, #32
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e07e      	b.n	8003050 <UART_SetConfig+0x390>
 8002f52:	231b      	movs	r3, #27
 8002f54:	2220      	movs	r2, #32
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	19db      	adds	r3, r3, r7
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e077      	b.n	8003050 <UART_SetConfig+0x390>
 8002f60:	231b      	movs	r3, #27
 8002f62:	2220      	movs	r2, #32
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	2204      	movs	r2, #4
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e070      	b.n	8003050 <UART_SetConfig+0x390>
 8002f6e:	231b      	movs	r3, #27
 8002f70:	2220      	movs	r2, #32
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	19db      	adds	r3, r3, r7
 8002f76:	2208      	movs	r2, #8
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e069      	b.n	8003050 <UART_SetConfig+0x390>
 8002f7c:	231b      	movs	r3, #27
 8002f7e:	2220      	movs	r2, #32
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	2210      	movs	r2, #16
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e062      	b.n	8003050 <UART_SetConfig+0x390>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <UART_SetConfig+0x344>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d157      	bne.n	8003044 <UART_SetConfig+0x384>
 8002f94:	4b1e      	ldr	r3, [pc, #120]	@ (8003010 <UART_SetConfig+0x350>)
 8002f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f98:	23c0      	movs	r3, #192	@ 0xc0
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	22c0      	movs	r2, #192	@ 0xc0
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d040      	beq.n	8003028 <UART_SetConfig+0x368>
 8002fa6:	22c0      	movs	r2, #192	@ 0xc0
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d843      	bhi.n	8003036 <UART_SetConfig+0x376>
 8002fae:	2280      	movs	r2, #128	@ 0x80
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d011      	beq.n	8002fda <UART_SetConfig+0x31a>
 8002fb6:	2280      	movs	r2, #128	@ 0x80
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d83b      	bhi.n	8003036 <UART_SetConfig+0x376>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <UART_SetConfig+0x30c>
 8002fc2:	2280      	movs	r2, #128	@ 0x80
 8002fc4:	0052      	lsls	r2, r2, #1
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00e      	beq.n	8002fe8 <UART_SetConfig+0x328>
 8002fca:	e034      	b.n	8003036 <UART_SetConfig+0x376>
 8002fcc:	231b      	movs	r3, #27
 8002fce:	2220      	movs	r2, #32
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e03a      	b.n	8003050 <UART_SetConfig+0x390>
 8002fda:	231b      	movs	r3, #27
 8002fdc:	2220      	movs	r2, #32
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	19db      	adds	r3, r3, r7
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e033      	b.n	8003050 <UART_SetConfig+0x390>
 8002fe8:	231b      	movs	r3, #27
 8002fea:	2220      	movs	r2, #32
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e02c      	b.n	8003050 <UART_SetConfig+0x390>
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	cfff69f3 	.word	0xcfff69f3
 8002ffc:	ffffcfff 	.word	0xffffcfff
 8003000:	40008000 	.word	0x40008000
 8003004:	40008400 	.word	0x40008400
 8003008:	11fff4ff 	.word	0x11fff4ff
 800300c:	40013800 	.word	0x40013800
 8003010:	40021000 	.word	0x40021000
 8003014:	40004400 	.word	0x40004400
 8003018:	40004800 	.word	0x40004800
 800301c:	40004c00 	.word	0x40004c00
 8003020:	40005000 	.word	0x40005000
 8003024:	40013c00 	.word	0x40013c00
 8003028:	231b      	movs	r3, #27
 800302a:	2220      	movs	r2, #32
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	2208      	movs	r2, #8
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e00c      	b.n	8003050 <UART_SetConfig+0x390>
 8003036:	231b      	movs	r3, #27
 8003038:	2220      	movs	r2, #32
 800303a:	189b      	adds	r3, r3, r2
 800303c:	19db      	adds	r3, r3, r7
 800303e:	2210      	movs	r2, #16
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e005      	b.n	8003050 <UART_SetConfig+0x390>
 8003044:	231b      	movs	r3, #27
 8003046:	2220      	movs	r2, #32
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	2210      	movs	r2, #16
 800304e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4ac1      	ldr	r2, [pc, #772]	@ (800335c <UART_SetConfig+0x69c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d005      	beq.n	8003066 <UART_SetConfig+0x3a6>
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4ac0      	ldr	r2, [pc, #768]	@ (8003360 <UART_SetConfig+0x6a0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d000      	beq.n	8003066 <UART_SetConfig+0x3a6>
 8003064:	e093      	b.n	800318e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003066:	231b      	movs	r3, #27
 8003068:	2220      	movs	r2, #32
 800306a:	189b      	adds	r3, r3, r2
 800306c:	19db      	adds	r3, r3, r7
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d015      	beq.n	80030a0 <UART_SetConfig+0x3e0>
 8003074:	dc18      	bgt.n	80030a8 <UART_SetConfig+0x3e8>
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00d      	beq.n	8003096 <UART_SetConfig+0x3d6>
 800307a:	dc15      	bgt.n	80030a8 <UART_SetConfig+0x3e8>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <UART_SetConfig+0x3c6>
 8003080:	2b02      	cmp	r3, #2
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0x3d0>
 8003084:	e010      	b.n	80030a8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003086:	f7fe ff23 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 800308a:	0003      	movs	r3, r0
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800308e:	e014      	b.n	80030ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003090:	4bb4      	ldr	r3, [pc, #720]	@ (8003364 <UART_SetConfig+0x6a4>)
 8003092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003094:	e011      	b.n	80030ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003096:	f7fe fe8f 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 800309a:	0003      	movs	r3, r0
 800309c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800309e:	e00c      	b.n	80030ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a0:	2380      	movs	r3, #128	@ 0x80
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80030a6:	e008      	b.n	80030ba <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80030ac:	231a      	movs	r3, #26
 80030ae:	2220      	movs	r2, #32
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	19db      	adds	r3, r3, r7
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
        break;
 80030b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <UART_SetConfig+0x402>
 80030c0:	e135      	b.n	800332e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003368 <UART_SetConfig+0x6a8>)
 80030c8:	0052      	lsls	r2, r2, #1
 80030ca:	5ad3      	ldrh	r3, [r2, r3]
 80030cc:	0019      	movs	r1, r3
 80030ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80030d0:	f7fd f818 	bl	8000104 <__udivsi3>
 80030d4:	0003      	movs	r3, r0
 80030d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	0013      	movs	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d305      	bcc.n	80030f4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d906      	bls.n	8003102 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80030f4:	231a      	movs	r3, #26
 80030f6:	2220      	movs	r2, #32
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	19db      	adds	r3, r3, r7
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e044      	b.n	800318c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800310e:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <UART_SetConfig+0x6a8>)
 8003110:	0052      	lsls	r2, r2, #1
 8003112:	5ad3      	ldrh	r3, [r2, r3]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	69b8      	ldr	r0, [r7, #24]
 8003120:	69f9      	ldr	r1, [r7, #28]
 8003122:	f7fd f965 	bl	80003f0 <__aeabi_uldivmod>
 8003126:	0002      	movs	r2, r0
 8003128:	000b      	movs	r3, r1
 800312a:	0e11      	lsrs	r1, r2, #24
 800312c:	021d      	lsls	r5, r3, #8
 800312e:	430d      	orrs	r5, r1
 8003130:	0214      	lsls	r4, r2, #8
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	1900      	adds	r0, r0, r4
 8003144:	4169      	adcs	r1, r5
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f7fd f94c 	bl	80003f0 <__aeabi_uldivmod>
 8003158:	0002      	movs	r2, r0
 800315a:	000b      	movs	r3, r1
 800315c:	0013      	movs	r3, r2
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003162:	23c0      	movs	r3, #192	@ 0xc0
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	429a      	cmp	r2, r3
 8003168:	d309      	bcc.n	800317e <UART_SetConfig+0x4be>
 800316a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	035b      	lsls	r3, r3, #13
 8003170:	429a      	cmp	r2, r3
 8003172:	d204      	bcs.n	800317e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	e006      	b.n	800318c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800317e:	231a      	movs	r3, #26
 8003180:	2220      	movs	r2, #32
 8003182:	189b      	adds	r3, r3, r2
 8003184:	19db      	adds	r3, r3, r7
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800318a:	e0d0      	b.n	800332e <UART_SetConfig+0x66e>
 800318c:	e0cf      	b.n	800332e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	429a      	cmp	r2, r3
 8003198:	d000      	beq.n	800319c <UART_SetConfig+0x4dc>
 800319a:	e070      	b.n	800327e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800319c:	231b      	movs	r3, #27
 800319e:	2220      	movs	r2, #32
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	19db      	adds	r3, r3, r7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d015      	beq.n	80031d6 <UART_SetConfig+0x516>
 80031aa:	dc18      	bgt.n	80031de <UART_SetConfig+0x51e>
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d00d      	beq.n	80031cc <UART_SetConfig+0x50c>
 80031b0:	dc15      	bgt.n	80031de <UART_SetConfig+0x51e>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <UART_SetConfig+0x4fc>
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d005      	beq.n	80031c6 <UART_SetConfig+0x506>
 80031ba:	e010      	b.n	80031de <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031bc:	f7fe fe88 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 80031c0:	0003      	movs	r3, r0
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031c4:	e014      	b.n	80031f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c6:	4b67      	ldr	r3, [pc, #412]	@ (8003364 <UART_SetConfig+0x6a4>)
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031ca:	e011      	b.n	80031f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031cc:	f7fe fdf4 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80031d0:	0003      	movs	r3, r0
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031d4:	e00c      	b.n	80031f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031dc:	e008      	b.n	80031f0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80031e2:	231a      	movs	r3, #26
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
        break;
 80031ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d100      	bne.n	80031f8 <UART_SetConfig+0x538>
 80031f6:	e09a      	b.n	800332e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003368 <UART_SetConfig+0x6a8>)
 80031fe:	0052      	lsls	r2, r2, #1
 8003200:	5ad3      	ldrh	r3, [r2, r3]
 8003202:	0019      	movs	r1, r3
 8003204:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003206:	f7fc ff7d 	bl	8000104 <__udivsi3>
 800320a:	0003      	movs	r3, r0
 800320c:	005a      	lsls	r2, r3, #1
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	18d2      	adds	r2, r2, r3
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	0019      	movs	r1, r3
 800321c:	0010      	movs	r0, r2
 800321e:	f7fc ff71 	bl	8000104 <__udivsi3>
 8003222:	0003      	movs	r3, r0
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	2b0f      	cmp	r3, #15
 800322a:	d921      	bls.n	8003270 <UART_SetConfig+0x5b0>
 800322c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	025b      	lsls	r3, r3, #9
 8003232:	429a      	cmp	r2, r3
 8003234:	d21c      	bcs.n	8003270 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	b29a      	uxth	r2, r3
 800323a:	200e      	movs	r0, #14
 800323c:	2420      	movs	r4, #32
 800323e:	1903      	adds	r3, r0, r4
 8003240:	19db      	adds	r3, r3, r7
 8003242:	210f      	movs	r1, #15
 8003244:	438a      	bics	r2, r1
 8003246:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	2207      	movs	r2, #7
 8003250:	4013      	ands	r3, r2
 8003252:	b299      	uxth	r1, r3
 8003254:	1903      	adds	r3, r0, r4
 8003256:	19db      	adds	r3, r3, r7
 8003258:	1902      	adds	r2, r0, r4
 800325a:	19d2      	adds	r2, r2, r7
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1902      	adds	r2, r0, r4
 8003268:	19d2      	adds	r2, r2, r7
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	e05e      	b.n	800332e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003270:	231a      	movs	r3, #26
 8003272:	2220      	movs	r2, #32
 8003274:	189b      	adds	r3, r3, r2
 8003276:	19db      	adds	r3, r3, r7
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e057      	b.n	800332e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800327e:	231b      	movs	r3, #27
 8003280:	2220      	movs	r2, #32
 8003282:	189b      	adds	r3, r3, r2
 8003284:	19db      	adds	r3, r3, r7
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d015      	beq.n	80032b8 <UART_SetConfig+0x5f8>
 800328c:	dc18      	bgt.n	80032c0 <UART_SetConfig+0x600>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d00d      	beq.n	80032ae <UART_SetConfig+0x5ee>
 8003292:	dc15      	bgt.n	80032c0 <UART_SetConfig+0x600>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <UART_SetConfig+0x5de>
 8003298:	2b02      	cmp	r3, #2
 800329a:	d005      	beq.n	80032a8 <UART_SetConfig+0x5e8>
 800329c:	e010      	b.n	80032c0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800329e:	f7fe fe17 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 80032a2:	0003      	movs	r3, r0
 80032a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032a6:	e014      	b.n	80032d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003364 <UART_SetConfig+0x6a4>)
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032ac:	e011      	b.n	80032d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ae:	f7fe fd83 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80032b2:	0003      	movs	r3, r0
 80032b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032b6:	e00c      	b.n	80032d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b8:	2380      	movs	r3, #128	@ 0x80
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032be:	e008      	b.n	80032d2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80032c4:	231a      	movs	r3, #26
 80032c6:	2220      	movs	r2, #32
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	19db      	adds	r3, r3, r7
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
        break;
 80032d0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80032d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02a      	beq.n	800332e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <UART_SetConfig+0x6a8>)
 80032de:	0052      	lsls	r2, r2, #1
 80032e0:	5ad3      	ldrh	r3, [r2, r3]
 80032e2:	0019      	movs	r1, r3
 80032e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032e6:	f7fc ff0d 	bl	8000104 <__udivsi3>
 80032ea:	0003      	movs	r3, r0
 80032ec:	001a      	movs	r2, r3
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	18d2      	adds	r2, r2, r3
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f7fc ff01 	bl	8000104 <__udivsi3>
 8003302:	0003      	movs	r3, r0
 8003304:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d90a      	bls.n	8003322 <UART_SetConfig+0x662>
 800330c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	025b      	lsls	r3, r3, #9
 8003312:	429a      	cmp	r2, r3
 8003314:	d205      	bcs.n	8003322 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	b29a      	uxth	r2, r3
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	e005      	b.n	800332e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003322:	231a      	movs	r3, #26
 8003324:	2220      	movs	r2, #32
 8003326:	189b      	adds	r3, r3, r2
 8003328:	19db      	adds	r3, r3, r7
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	226a      	movs	r2, #106	@ 0x6a
 8003332:	2101      	movs	r1, #1
 8003334:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	2268      	movs	r2, #104	@ 0x68
 800333a:	2101      	movs	r1, #1
 800333c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2200      	movs	r2, #0
 8003342:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	2200      	movs	r2, #0
 8003348:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800334a:	231a      	movs	r3, #26
 800334c:	2220      	movs	r2, #32
 800334e:	189b      	adds	r3, r3, r2
 8003350:	19db      	adds	r3, r3, r7
 8003352:	781b      	ldrb	r3, [r3, #0]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b010      	add	sp, #64	@ 0x40
 800335a:	bdb0      	pop	{r4, r5, r7, pc}
 800335c:	40008000 	.word	0x40008000
 8003360:	40008400 	.word	0x40008400
 8003364:	00f42400 	.word	0x00f42400
 8003368:	08004b80 	.word	0x08004b80

0800336c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	2208      	movs	r2, #8
 800337a:	4013      	ands	r3, r2
 800337c:	d00b      	beq.n	8003396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a4a      	ldr	r2, [pc, #296]	@ (80034b0 <UART_AdvFeatureConfig+0x144>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	2201      	movs	r2, #1
 800339c:	4013      	ands	r3, r2
 800339e:	d00b      	beq.n	80033b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a43      	ldr	r2, [pc, #268]	@ (80034b4 <UART_AdvFeatureConfig+0x148>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d00b      	beq.n	80033da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a3b      	ldr	r2, [pc, #236]	@ (80034b8 <UART_AdvFeatureConfig+0x14c>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	2204      	movs	r2, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	d00b      	beq.n	80033fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a34      	ldr	r2, [pc, #208]	@ (80034bc <UART_AdvFeatureConfig+0x150>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	2210      	movs	r2, #16
 8003402:	4013      	ands	r3, r2
 8003404:	d00b      	beq.n	800341e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a2c      	ldr	r2, [pc, #176]	@ (80034c0 <UART_AdvFeatureConfig+0x154>)
 800340e:	4013      	ands	r3, r2
 8003410:	0019      	movs	r1, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	2220      	movs	r2, #32
 8003424:	4013      	ands	r3, r2
 8003426:	d00b      	beq.n	8003440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <UART_AdvFeatureConfig+0x158>)
 8003430:	4013      	ands	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	4013      	ands	r3, r2
 8003448:	d01d      	beq.n	8003486 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <UART_AdvFeatureConfig+0x15c>)
 8003452:	4013      	ands	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	035b      	lsls	r3, r3, #13
 800346a:	429a      	cmp	r2, r3
 800346c:	d10b      	bne.n	8003486 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <UART_AdvFeatureConfig+0x160>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	2280      	movs	r2, #128	@ 0x80
 800348c:	4013      	ands	r3, r2
 800348e:	d00b      	beq.n	80034a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <UART_AdvFeatureConfig+0x164>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }
}
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	ffff7fff 	.word	0xffff7fff
 80034b4:	fffdffff 	.word	0xfffdffff
 80034b8:	fffeffff 	.word	0xfffeffff
 80034bc:	fffbffff 	.word	0xfffbffff
 80034c0:	ffffefff 	.word	0xffffefff
 80034c4:	ffffdfff 	.word	0xffffdfff
 80034c8:	ffefffff 	.word	0xffefffff
 80034cc:	ff9fffff 	.word	0xff9fffff
 80034d0:	fff7ffff 	.word	0xfff7ffff

080034d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b092      	sub	sp, #72	@ 0x48
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2290      	movs	r2, #144	@ 0x90
 80034e0:	2100      	movs	r1, #0
 80034e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e4:	f7fd fc26 	bl	8000d34 <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2208      	movs	r2, #8
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d12d      	bne.n	8003556 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	0391      	lsls	r1, r2, #14
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4a47      	ldr	r2, [pc, #284]	@ (8003620 <UART_CheckIdleState+0x14c>)
 8003504:	9200      	str	r2, [sp, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	f000 f88e 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d022      	beq.n	8003556 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003510:	f3ef 8310 	mrs	r3, PRIMASK
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800351a:	2301      	movs	r3, #1
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2180      	movs	r1, #128	@ 0x80
 8003532:	438a      	bics	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2288      	movs	r2, #136	@ 0x88
 8003546:	2120      	movs	r1, #32
 8003548:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2284      	movs	r2, #132	@ 0x84
 800354e:	2100      	movs	r1, #0
 8003550:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e060      	b.n	8003618 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2204      	movs	r2, #4
 800355e:	4013      	ands	r3, r2
 8003560:	2b04      	cmp	r3, #4
 8003562:	d146      	bne.n	80035f2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003566:	2280      	movs	r2, #128	@ 0x80
 8003568:	03d1      	lsls	r1, r2, #15
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <UART_CheckIdleState+0x14c>)
 800356e:	9200      	str	r2, [sp, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	f000 f859 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d03b      	beq.n	80035f2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357a:	f3ef 8310 	mrs	r3, PRIMASK
 800357e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003580:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003582:	637b      	str	r3, [r7, #52]	@ 0x34
 8003584:	2301      	movs	r3, #1
 8003586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4922      	ldr	r1, [pc, #136]	@ (8003624 <UART_CheckIdleState+0x150>)
 800359c:	400a      	ands	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ac:	f3ef 8310 	mrs	r3, PRIMASK
 80035b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80035b2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			@ (mov r8, r8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	438a      	bics	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f383 8810 	msr	PRIMASK, r3
}
 80035dc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	228c      	movs	r2, #140	@ 0x8c
 80035e2:	2120      	movs	r1, #32
 80035e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2284      	movs	r2, #132	@ 0x84
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e012      	b.n	8003618 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2288      	movs	r2, #136	@ 0x88
 80035f6:	2120      	movs	r1, #32
 80035f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	228c      	movs	r2, #140	@ 0x8c
 80035fe:	2120      	movs	r1, #32
 8003600:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2284      	movs	r2, #132	@ 0x84
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b010      	add	sp, #64	@ 0x40
 800361e:	bd80      	pop	{r7, pc}
 8003620:	01ffffff 	.word	0x01ffffff
 8003624:	fffffedf 	.word	0xfffffedf

08003628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	e051      	b.n	80036de <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3301      	adds	r3, #1
 800363e:	d04e      	beq.n	80036de <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fd fb78 	bl	8000d34 <HAL_GetTick>
 8003644:	0002      	movs	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e051      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2204      	movs	r2, #4
 8003662:	4013      	ands	r3, r2
 8003664:	d03b      	beq.n	80036de <UART_WaitOnFlagUntilTimeout+0xb6>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b80      	cmp	r3, #128	@ 0x80
 800366a:	d038      	beq.n	80036de <UART_WaitOnFlagUntilTimeout+0xb6>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d035      	beq.n	80036de <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2208      	movs	r2, #8
 800367a:	4013      	ands	r3, r2
 800367c:	2b08      	cmp	r3, #8
 800367e:	d111      	bne.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2208      	movs	r2, #8
 8003686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f960 	bl	8003950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2290      	movs	r2, #144	@ 0x90
 8003694:	2108      	movs	r1, #8
 8003696:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2284      	movs	r2, #132	@ 0x84
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e02c      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	401a      	ands	r2, r3
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d112      	bne.n	80036de <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 f943 	bl	8003950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2290      	movs	r2, #144	@ 0x90
 80036ce:	2120      	movs	r1, #32
 80036d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2284      	movs	r2, #132	@ 0x84
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e00f      	b.n	80036fe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	4013      	ands	r3, r2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	425a      	negs	r2, r3
 80036ee:	4153      	adcs	r3, r2
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	001a      	movs	r2, r3
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d09e      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b098      	sub	sp, #96	@ 0x60
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	1dbb      	adds	r3, r7, #6
 8003714:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1dba      	adds	r2, r7, #6
 8003720:	215c      	movs	r1, #92	@ 0x5c
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1dba      	adds	r2, r7, #6
 800372a:	215e      	movs	r1, #94	@ 0x5e
 800372c:	8812      	ldrh	r2, [r2, #0]
 800372e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	2380      	movs	r3, #128	@ 0x80
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	429a      	cmp	r2, r3
 8003740:	d10d      	bne.n	800375e <UART_Start_Receive_IT+0x56>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <UART_Start_Receive_IT+0x4c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2260      	movs	r2, #96	@ 0x60
 800374e:	497b      	ldr	r1, [pc, #492]	@ (800393c <UART_Start_Receive_IT+0x234>)
 8003750:	5299      	strh	r1, [r3, r2]
 8003752:	e02e      	b.n	80037b2 <UART_Start_Receive_IT+0xaa>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2260      	movs	r2, #96	@ 0x60
 8003758:	21ff      	movs	r1, #255	@ 0xff
 800375a:	5299      	strh	r1, [r3, r2]
 800375c:	e029      	b.n	80037b2 <UART_Start_Receive_IT+0xaa>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <UART_Start_Receive_IT+0x7a>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <UART_Start_Receive_IT+0x70>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2260      	movs	r2, #96	@ 0x60
 8003772:	21ff      	movs	r1, #255	@ 0xff
 8003774:	5299      	strh	r1, [r3, r2]
 8003776:	e01c      	b.n	80037b2 <UART_Start_Receive_IT+0xaa>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2260      	movs	r2, #96	@ 0x60
 800377c:	217f      	movs	r1, #127	@ 0x7f
 800377e:	5299      	strh	r1, [r3, r2]
 8003780:	e017      	b.n	80037b2 <UART_Start_Receive_IT+0xaa>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	2380      	movs	r3, #128	@ 0x80
 8003788:	055b      	lsls	r3, r3, #21
 800378a:	429a      	cmp	r2, r3
 800378c:	d10d      	bne.n	80037aa <UART_Start_Receive_IT+0xa2>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <UART_Start_Receive_IT+0x98>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2260      	movs	r2, #96	@ 0x60
 800379a:	217f      	movs	r1, #127	@ 0x7f
 800379c:	5299      	strh	r1, [r3, r2]
 800379e:	e008      	b.n	80037b2 <UART_Start_Receive_IT+0xaa>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2260      	movs	r2, #96	@ 0x60
 80037a4:	213f      	movs	r1, #63	@ 0x3f
 80037a6:	5299      	strh	r1, [r3, r2]
 80037a8:	e003      	b.n	80037b2 <UART_Start_Receive_IT+0xaa>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2260      	movs	r2, #96	@ 0x60
 80037ae:	2100      	movs	r1, #0
 80037b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2290      	movs	r2, #144	@ 0x90
 80037b6:	2100      	movs	r1, #0
 80037b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	228c      	movs	r2, #140	@ 0x8c
 80037be:	2122      	movs	r1, #34	@ 0x22
 80037c0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80037c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037cc:	2301      	movs	r3, #1
 80037ce:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	059b      	lsls	r3, r3, #22
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d150      	bne.n	80038a2 <UART_Start_Receive_IT+0x19a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2268      	movs	r2, #104	@ 0x68
 8003804:	5a9b      	ldrh	r3, [r3, r2]
 8003806:	1dba      	adds	r2, r7, #6
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d349      	bcc.n	80038a2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	429a      	cmp	r2, r3
 8003818:	d107      	bne.n	800382a <UART_Start_Receive_IT+0x122>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a46      	ldr	r2, [pc, #280]	@ (8003940 <UART_Start_Receive_IT+0x238>)
 8003826:	675a      	str	r2, [r3, #116]	@ 0x74
 8003828:	e002      	b.n	8003830 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a45      	ldr	r2, [pc, #276]	@ (8003944 <UART_Start_Receive_IT+0x23c>)
 800382e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d019      	beq.n	800386c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800383e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003840:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003842:	2301      	movs	r3, #1
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	0049      	lsls	r1, r1, #1
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003874:	657b      	str	r3, [r7, #84]	@ 0x54
 8003876:	2301      	movs	r3, #1
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2180      	movs	r1, #128	@ 0x80
 800388e:	0549      	lsls	r1, r1, #21
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	e047      	b.n	8003932 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	015b      	lsls	r3, r3, #5
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d107      	bne.n	80038be <UART_Start_Receive_IT+0x1b6>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <UART_Start_Receive_IT+0x240>)
 80038ba:	675a      	str	r2, [r3, #116]	@ 0x74
 80038bc:	e002      	b.n	80038c4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a22      	ldr	r2, [pc, #136]	@ (800394c <UART_Start_Receive_IT+0x244>)
 80038c2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d019      	beq.n	8003900 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038cc:	f3ef 8310 	mrs	r3, PRIMASK
 80038d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80038d2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80038d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d6:	2301      	movs	r3, #1
 80038d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			@ (mov r8, r8)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2190      	movs	r1, #144	@ 0x90
 80038ee:	0049      	lsls	r1, r1, #1
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	f383 8810 	msr	PRIMASK, r3
}
 80038fe:	e018      	b.n	8003932 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003900:	f3ef 8310 	mrs	r3, PRIMASK
 8003904:	613b      	str	r3, [r7, #16]
  return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003908:	653b      	str	r3, [r7, #80]	@ 0x50
 800390a:	2301      	movs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f383 8810 	msr	PRIMASK, r3
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2120      	movs	r1, #32
 8003922:	430a      	orrs	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003928:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b018      	add	sp, #96	@ 0x60
 800393a:	bd80      	pop	{r7, pc}
 800393c:	000001ff 	.word	0x000001ff
 8003940:	080044e9 	.word	0x080044e9
 8003944:	0800419d 	.word	0x0800419d
 8003948:	08003fc9 	.word	0x08003fc9
 800394c:	08003df5 	.word	0x08003df5

08003950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	@ 0x38
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003958:	f3ef 8310 	mrs	r3, PRIMASK
 800395c:	617b      	str	r3, [r7, #20]
  return(result);
 800395e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4926      	ldr	r1, [pc, #152]	@ (8003a14 <UART_EndRxTransfer+0xc4>)
 800397a:	400a      	ands	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	623b      	str	r3, [r7, #32]
  return(result);
 8003990:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
 8003994:	2301      	movs	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	491b      	ldr	r1, [pc, #108]	@ (8003a18 <UART_EndRxTransfer+0xc8>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d118      	bne.n	80039f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	2301      	movs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2110      	movs	r1, #16
 80039e6:	438a      	bics	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	228c      	movs	r2, #140	@ 0x8c
 80039fa:	2120      	movs	r1, #32
 80039fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b00e      	add	sp, #56	@ 0x38
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	fffffedf 	.word	0xfffffedf
 8003a18:	effffffe 	.word	0xeffffffe

08003a1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	225e      	movs	r2, #94	@ 0x5e
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2256      	movs	r2, #86	@ 0x56
 8003a36:	2100      	movs	r1, #0
 8003a38:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff f92b 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b08a      	sub	sp, #40	@ 0x28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2288      	movs	r2, #136	@ 0x88
 8003a56:	589b      	ldr	r3, [r3, r2]
 8003a58:	2b21      	cmp	r3, #33	@ 0x21
 8003a5a:	d14c      	bne.n	8003af6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2256      	movs	r2, #86	@ 0x56
 8003a60:	5a9b      	ldrh	r3, [r3, r2]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d132      	bne.n	8003ace <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a68:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a72:	2301      	movs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	438a      	bics	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8003aa0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa2:	623b      	str	r3, [r7, #32]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2140      	movs	r1, #64	@ 0x40
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003acc:	e013      	b.n	8003af6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2256      	movs	r2, #86	@ 0x56
 8003ae8:	5a9b      	ldrh	r3, [r3, r2]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b299      	uxth	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2256      	movs	r2, #86	@ 0x56
 8003af4:	5299      	strh	r1, [r3, r2]
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b00a      	add	sp, #40	@ 0x28
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b08c      	sub	sp, #48	@ 0x30
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2288      	movs	r2, #136	@ 0x88
 8003b0a:	589b      	ldr	r3, [r3, r2]
 8003b0c:	2b21      	cmp	r3, #33	@ 0x21
 8003b0e:	d151      	bne.n	8003bb4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2256      	movs	r2, #86	@ 0x56
 8003b14:	5a9b      	ldrh	r3, [r3, r2]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d132      	bne.n	8003b82 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b26:	2301      	movs	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2180      	movs	r1, #128	@ 0x80
 8003b3e:	438a      	bics	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b52:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b54:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b58:	2301      	movs	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003b80:	e018      	b.n	8003bb4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	05d2      	lsls	r2, r2, #23
 8003b94:	0dd2      	lsrs	r2, r2, #23
 8003b96:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2256      	movs	r2, #86	@ 0x56
 8003ba6:	5a9b      	ldrh	r3, [r3, r2]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b299      	uxth	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2256      	movs	r2, #86	@ 0x56
 8003bb2:	5299      	strh	r1, [r3, r2]
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b00c      	add	sp, #48	@ 0x30
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	@ 0x30
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2288      	movs	r2, #136	@ 0x88
 8003bc8:	589b      	ldr	r3, [r3, r2]
 8003bca:	2b21      	cmp	r3, #33	@ 0x21
 8003bcc:	d165      	bne.n	8003c9a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003bce:	232e      	movs	r3, #46	@ 0x2e
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	216a      	movs	r1, #106	@ 0x6a
 8003bd6:	5a52      	ldrh	r2, [r2, r1]
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e059      	b.n	8003c90 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2256      	movs	r2, #86	@ 0x56
 8003be0:	5a9b      	ldrh	r3, [r3, r2]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d133      	bne.n	8003c50 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4926      	ldr	r1, [pc, #152]	@ (8003ca4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c20:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c24:	2301      	movs	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2140      	movs	r1, #64	@ 0x40
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003c4c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003c4e:	e024      	b.n	8003c9a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2280      	movs	r2, #128	@ 0x80
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2256      	movs	r2, #86	@ 0x56
 8003c76:	5a9b      	ldrh	r3, [r3, r2]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b299      	uxth	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2256      	movs	r2, #86	@ 0x56
 8003c82:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c84:	212e      	movs	r1, #46	@ 0x2e
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	232e      	movs	r3, #46	@ 0x2e
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1a0      	bne.n	8003bdc <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b00c      	add	sp, #48	@ 0x30
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	ff7fffff 	.word	0xff7fffff

08003ca8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	@ 0x30
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2288      	movs	r2, #136	@ 0x88
 8003cb4:	589b      	ldr	r3, [r3, r2]
 8003cb6:	2b21      	cmp	r3, #33	@ 0x21
 8003cb8:	d16a      	bne.n	8003d90 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003cba:	232e      	movs	r3, #46	@ 0x2e
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	216a      	movs	r1, #106	@ 0x6a
 8003cc2:	5a52      	ldrh	r2, [r2, r1]
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	e05e      	b.n	8003d86 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2256      	movs	r2, #86	@ 0x56
 8003ccc:	5a9b      	ldrh	r3, [r3, r2]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d133      	bne.n	8003d3c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cda:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cde:	2301      	movs	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4928      	ldr	r1, [pc, #160]	@ (8003d98 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d06:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d0c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	2301      	movs	r3, #1
 8003d12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f383 8810 	msr	PRIMASK, r3
}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2140      	movs	r1, #64	@ 0x40
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f383 8810 	msr	PRIMASK, r3
}
 8003d36:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003d38:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003d3a:	e029      	b.n	8003d90 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	2280      	movs	r2, #128	@ 0x80
 8003d44:	4013      	ands	r3, r2
 8003d46:	d018      	beq.n	8003d7a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	001a      	movs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	05d2      	lsls	r2, r2, #23
 8003d5a:	0dd2      	lsrs	r2, r2, #23
 8003d5c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2256      	movs	r2, #86	@ 0x56
 8003d6c:	5a9b      	ldrh	r3, [r3, r2]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b299      	uxth	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2256      	movs	r2, #86	@ 0x56
 8003d78:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003d7a:	212e      	movs	r1, #46	@ 0x2e
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	881a      	ldrh	r2, [r3, #0]
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	3a01      	subs	r2, #1
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	232e      	movs	r3, #46	@ 0x2e
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19b      	bne.n	8003cc8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b00c      	add	sp, #48	@ 0x30
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	ff7fffff 	.word	0xff7fffff

08003d9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da4:	f3ef 8310 	mrs	r3, PRIMASK
 8003da8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003daa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	2301      	movs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			@ (mov r8, r8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2140      	movs	r1, #64	@ 0x40
 8003dc6:	438a      	bics	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2288      	movs	r2, #136	@ 0x88
 8003dda:	2120      	movs	r1, #32
 8003ddc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7fe ff4e 	bl	8002c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b006      	add	sp, #24
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b094      	sub	sp, #80	@ 0x50
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003dfc:	204e      	movs	r0, #78	@ 0x4e
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	2160      	movs	r1, #96	@ 0x60
 8003e04:	5a52      	ldrh	r2, [r2, r1]
 8003e06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	228c      	movs	r2, #140	@ 0x8c
 8003e0c:	589b      	ldr	r3, [r3, r2]
 8003e0e:	2b22      	cmp	r3, #34	@ 0x22
 8003e10:	d000      	beq.n	8003e14 <UART_RxISR_8BIT+0x20>
 8003e12:	e0c4      	b.n	8003f9e <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e1a:	214c      	movs	r1, #76	@ 0x4c
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b2d9      	uxtb	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	400a      	ands	r2, r1
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	225e      	movs	r2, #94	@ 0x5e
 8003e44:	5a9b      	ldrh	r3, [r3, r2]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b299      	uxth	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	225e      	movs	r2, #94	@ 0x5e
 8003e50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	225e      	movs	r2, #94	@ 0x5e
 8003e56:	5a9b      	ldrh	r3, [r3, r2]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d000      	beq.n	8003e60 <UART_RxISR_8BIT+0x6c>
 8003e5e:	e0a6      	b.n	8003fae <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e60:	f3ef 8310 	mrs	r3, PRIMASK
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	494d      	ldr	r1, [pc, #308]	@ (8003fb8 <UART_RxISR_8BIT+0x1c4>)
 8003e82:	400a      	ands	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e92:	f3ef 8310 	mrs	r3, PRIMASK
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	f383 8810 	msr	PRIMASK, r3
}
 8003ec2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	228c      	movs	r2, #140	@ 0x8c
 8003ec8:	2120      	movs	r1, #32
 8003eca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a37      	ldr	r2, [pc, #220]	@ (8003fbc <UART_RxISR_8BIT+0x1c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d024      	beq.n	8003f2c <UART_RxISR_8BIT+0x138>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a36      	ldr	r2, [pc, #216]	@ (8003fc0 <UART_RxISR_8BIT+0x1cc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d01f      	beq.n	8003f2c <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d018      	beq.n	8003f2c <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efa:	f3ef 8310 	mrs	r3, PRIMASK
 8003efe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f00:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f02:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f04:	2301      	movs	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	492a      	ldr	r1, [pc, #168]	@ (8003fc4 <UART_RxISR_8BIT+0x1d0>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d12f      	bne.n	8003f94 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f40:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f44:	2301      	movs	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2110      	movs	r1, #16
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f383 8810 	msr	PRIMASK, r3
}
 8003f6a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2210      	movs	r2, #16
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d103      	bne.n	8003f82 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	225c      	movs	r2, #92	@ 0x5c
 8003f86:	5a9a      	ldrh	r2, [r3, r2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fe fe8b 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f92:	e00c      	b.n	8003fae <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc fba4 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 8003f9c:	e007      	b.n	8003fae <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2108      	movs	r1, #8
 8003faa:	430a      	orrs	r2, r1
 8003fac:	619a      	str	r2, [r3, #24]
}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b014      	add	sp, #80	@ 0x50
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	fffffedf 	.word	0xfffffedf
 8003fbc:	40008000 	.word	0x40008000
 8003fc0:	40008400 	.word	0x40008400
 8003fc4:	fbffffff 	.word	0xfbffffff

08003fc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b094      	sub	sp, #80	@ 0x50
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fd0:	204e      	movs	r0, #78	@ 0x4e
 8003fd2:	183b      	adds	r3, r7, r0
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	2160      	movs	r1, #96	@ 0x60
 8003fd8:	5a52      	ldrh	r2, [r2, r1]
 8003fda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	228c      	movs	r2, #140	@ 0x8c
 8003fe0:	589b      	ldr	r3, [r3, r2]
 8003fe2:	2b22      	cmp	r3, #34	@ 0x22
 8003fe4:	d000      	beq.n	8003fe8 <UART_RxISR_16BIT+0x20>
 8003fe6:	e0c4      	b.n	8004172 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fee:	214c      	movs	r1, #76	@ 0x4c
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	183a      	adds	r2, r7, r0
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	4013      	ands	r3, r2
 8004004:	b29a      	uxth	r2, r3
 8004006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004008:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	225e      	movs	r2, #94	@ 0x5e
 8004018:	5a9b      	ldrh	r3, [r3, r2]
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b299      	uxth	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	225e      	movs	r2, #94	@ 0x5e
 8004024:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	225e      	movs	r2, #94	@ 0x5e
 800402a:	5a9b      	ldrh	r3, [r3, r2]
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d000      	beq.n	8004034 <UART_RxISR_16BIT+0x6c>
 8004032:	e0a6      	b.n	8004182 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004034:	f3ef 8310 	mrs	r3, PRIMASK
 8004038:	623b      	str	r3, [r7, #32]
  return(result);
 800403a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
 800403e:	2301      	movs	r3, #1
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	494d      	ldr	r1, [pc, #308]	@ (800418c <UART_RxISR_16BIT+0x1c4>)
 8004056:	400a      	ands	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004060:	f383 8810 	msr	PRIMASK, r3
}
 8004064:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8310 	mrs	r3, PRIMASK
 800406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004070:	2301      	movs	r3, #1
 8004072:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2101      	movs	r1, #1
 8004088:	438a      	bics	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	228c      	movs	r2, #140	@ 0x8c
 800409c:	2120      	movs	r1, #32
 800409e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a37      	ldr	r2, [pc, #220]	@ (8004190 <UART_RxISR_16BIT+0x1c8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d024      	beq.n	8004100 <UART_RxISR_16BIT+0x138>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a36      	ldr	r2, [pc, #216]	@ (8004194 <UART_RxISR_16BIT+0x1cc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01f      	beq.n	8004100 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	2380      	movs	r3, #128	@ 0x80
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	4013      	ands	r3, r2
 80040cc:	d018      	beq.n	8004100 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ce:	f3ef 8310 	mrs	r3, PRIMASK
 80040d2:	617b      	str	r3, [r7, #20]
  return(result);
 80040d4:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d8:	2301      	movs	r3, #1
 80040da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	492a      	ldr	r1, [pc, #168]	@ (8004198 <UART_RxISR_16BIT+0x1d0>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d12f      	bne.n	8004168 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	60bb      	str	r3, [r7, #8]
  return(result);
 8004114:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004118:	2301      	movs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2110      	movs	r1, #16
 8004130:	438a      	bics	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f383 8810 	msr	PRIMASK, r3
}
 800413e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	2210      	movs	r2, #16
 8004148:	4013      	ands	r3, r2
 800414a:	2b10      	cmp	r3, #16
 800414c:	d103      	bne.n	8004156 <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2210      	movs	r2, #16
 8004154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	225c      	movs	r2, #92	@ 0x5c
 800415a:	5a9a      	ldrh	r2, [r3, r2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0011      	movs	r1, r2
 8004160:	0018      	movs	r0, r3
 8004162:	f7fe fda1 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004166:	e00c      	b.n	8004182 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	0018      	movs	r0, r3
 800416c:	f7fc faba 	bl	80006e4 <HAL_UART_RxCpltCallback>
}
 8004170:	e007      	b.n	8004182 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2108      	movs	r1, #8
 800417e:	430a      	orrs	r2, r1
 8004180:	619a      	str	r2, [r3, #24]
}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b014      	add	sp, #80	@ 0x50
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	fffffedf 	.word	0xfffffedf
 8004190:	40008000 	.word	0x40008000
 8004194:	40008400 	.word	0x40008400
 8004198:	fbffffff 	.word	0xfbffffff

0800419c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b0a0      	sub	sp, #128	@ 0x80
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80041a4:	237a      	movs	r3, #122	@ 0x7a
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	2160      	movs	r1, #96	@ 0x60
 80041ac:	5a52      	ldrh	r2, [r2, r1]
 80041ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	228c      	movs	r2, #140	@ 0x8c
 80041cc:	589b      	ldr	r3, [r3, r2]
 80041ce:	2b22      	cmp	r3, #34	@ 0x22
 80041d0:	d000      	beq.n	80041d4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80041d2:	e16f      	b.n	80044b4 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80041d4:	236e      	movs	r3, #110	@ 0x6e
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	2168      	movs	r1, #104	@ 0x68
 80041dc:	5a52      	ldrh	r2, [r2, r1]
 80041de:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041e0:	e116      	b.n	8004410 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041e8:	216c      	movs	r1, #108	@ 0x6c
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	237a      	movs	r3, #122	@ 0x7a
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b2d9      	uxtb	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004200:	400a      	ands	r2, r1
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	225e      	movs	r2, #94	@ 0x5e
 8004214:	5a9b      	ldrh	r3, [r3, r2]
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b299      	uxth	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	225e      	movs	r2, #94	@ 0x5e
 8004220:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800422a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800422c:	2207      	movs	r2, #7
 800422e:	4013      	ands	r3, r2
 8004230:	d049      	beq.n	80042c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004234:	2201      	movs	r2, #1
 8004236:	4013      	ands	r3, r2
 8004238:	d010      	beq.n	800425c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800423a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800423c:	2380      	movs	r3, #128	@ 0x80
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4013      	ands	r3, r2
 8004242:	d00b      	beq.n	800425c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2201      	movs	r2, #1
 800424a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2290      	movs	r2, #144	@ 0x90
 8004250:	589b      	ldr	r3, [r3, r2]
 8004252:	2201      	movs	r2, #1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2190      	movs	r1, #144	@ 0x90
 800425a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800425c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800425e:	2202      	movs	r2, #2
 8004260:	4013      	ands	r3, r2
 8004262:	d00f      	beq.n	8004284 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	d00b      	beq.n	8004284 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2202      	movs	r2, #2
 8004272:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2290      	movs	r2, #144	@ 0x90
 8004278:	589b      	ldr	r3, [r3, r2]
 800427a:	2204      	movs	r2, #4
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2190      	movs	r1, #144	@ 0x90
 8004282:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004286:	2204      	movs	r2, #4
 8004288:	4013      	ands	r3, r2
 800428a:	d00f      	beq.n	80042ac <UART_RxISR_8BIT_FIFOEN+0x110>
 800428c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800428e:	2201      	movs	r2, #1
 8004290:	4013      	ands	r3, r2
 8004292:	d00b      	beq.n	80042ac <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2204      	movs	r2, #4
 800429a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2290      	movs	r2, #144	@ 0x90
 80042a0:	589b      	ldr	r3, [r3, r2]
 80042a2:	2202      	movs	r2, #2
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2190      	movs	r1, #144	@ 0x90
 80042aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2290      	movs	r2, #144	@ 0x90
 80042b0:	589b      	ldr	r3, [r3, r2]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fe fced 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2290      	movs	r2, #144	@ 0x90
 80042c2:	2100      	movs	r1, #0
 80042c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	225e      	movs	r2, #94	@ 0x5e
 80042ca:	5a9b      	ldrh	r3, [r3, r2]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d000      	beq.n	80042d4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80042d2:	e09d      	b.n	8004410 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042de:	2301      	movs	r3, #1
 80042e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4975      	ldr	r1, [pc, #468]	@ (80044cc <UART_RxISR_8BIT_FIFOEN+0x330>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004306:	f3ef 8310 	mrs	r3, PRIMASK
 800430a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800430e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004310:	2301      	movs	r3, #1
 8004312:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004316:	f383 8810 	msr	PRIMASK, r3
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	496a      	ldr	r1, [pc, #424]	@ (80044d0 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004328:	400a      	ands	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	228c      	movs	r2, #140	@ 0x8c
 800433c:	2120      	movs	r1, #32
 800433e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a60      	ldr	r2, [pc, #384]	@ (80044d4 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d024      	beq.n	80043a0 <UART_RxISR_8BIT_FIFOEN+0x204>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5f      	ldr	r2, [pc, #380]	@ (80044d8 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01f      	beq.n	80043a0 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	4013      	ands	r3, r2
 800436c:	d018      	beq.n	80043a0 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436e:	f3ef 8310 	mrs	r3, PRIMASK
 8004372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004376:	663b      	str	r3, [r7, #96]	@ 0x60
 8004378:	2301      	movs	r3, #1
 800437a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4953      	ldr	r1, [pc, #332]	@ (80044dc <UART_RxISR_8BIT_FIFOEN+0x340>)
 8004390:	400a      	ands	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439a:	f383 8810 	msr	PRIMASK, r3
}
 800439e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d12f      	bne.n	8004408 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ae:	f3ef 8310 	mrs	r3, PRIMASK
 80043b2:	623b      	str	r3, [r7, #32]
  return(result);
 80043b4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b8:	2301      	movs	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	f383 8810 	msr	PRIMASK, r3
}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2110      	movs	r1, #16
 80043d0:	438a      	bics	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	f383 8810 	msr	PRIMASK, r3
}
 80043de:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	2210      	movs	r2, #16
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d103      	bne.n	80043f6 <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2210      	movs	r2, #16
 80043f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	225c      	movs	r2, #92	@ 0x5c
 80043fa:	5a9a      	ldrh	r2, [r3, r2]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f7fe fc51 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
 8004406:	e003      	b.n	8004410 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0018      	movs	r0, r3
 800440c:	f7fc f96a 	bl	80006e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004410:	236e      	movs	r3, #110	@ 0x6e
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <UART_RxISR_8BIT_FIFOEN+0x288>
 800441a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800441c:	2220      	movs	r2, #32
 800441e:	4013      	ands	r3, r2
 8004420:	d000      	beq.n	8004424 <UART_RxISR_8BIT_FIFOEN+0x288>
 8004422:	e6de      	b.n	80041e2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004424:	205a      	movs	r0, #90	@ 0x5a
 8004426:	183b      	adds	r3, r7, r0
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	215e      	movs	r1, #94	@ 0x5e
 800442c:	5a52      	ldrh	r2, [r2, r1]
 800442e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004430:	0001      	movs	r1, r0
 8004432:	187b      	adds	r3, r7, r1
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d044      	beq.n	80044c4 <UART_RxISR_8BIT_FIFOEN+0x328>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2268      	movs	r2, #104	@ 0x68
 800443e:	5a9b      	ldrh	r3, [r3, r2]
 8004440:	187a      	adds	r2, r7, r1
 8004442:	8812      	ldrh	r2, [r2, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d23d      	bcs.n	80044c4 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	60bb      	str	r3, [r7, #8]
  return(result);
 800444e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004450:	657b      	str	r3, [r7, #84]	@ 0x54
 8004452:	2301      	movs	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	491d      	ldr	r1, [pc, #116]	@ (80044e0 <UART_RxISR_8BIT_FIFOEN+0x344>)
 800446a:	400a      	ands	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <UART_RxISR_8BIT_FIFOEN+0x348>)
 800447e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004480:	f3ef 8310 	mrs	r3, PRIMASK
 8004484:	617b      	str	r3, [r7, #20]
  return(result);
 8004486:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004488:	653b      	str	r3, [r7, #80]	@ 0x50
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2120      	movs	r1, #32
 80044a2:	430a      	orrs	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f383 8810 	msr	PRIMASK, r3
}
 80044b0:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044b2:	e007      	b.n	80044c4 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2108      	movs	r1, #8
 80044c0:	430a      	orrs	r2, r1
 80044c2:	619a      	str	r2, [r3, #24]
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b020      	add	sp, #128	@ 0x80
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	fffffeff 	.word	0xfffffeff
 80044d0:	effffffe 	.word	0xeffffffe
 80044d4:	40008000 	.word	0x40008000
 80044d8:	40008400 	.word	0x40008400
 80044dc:	fbffffff 	.word	0xfbffffff
 80044e0:	efffffff 	.word	0xefffffff
 80044e4:	08003df5 	.word	0x08003df5

080044e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b0a2      	sub	sp, #136	@ 0x88
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80044f0:	2382      	movs	r3, #130	@ 0x82
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	2160      	movs	r1, #96	@ 0x60
 80044f8:	5a52      	ldrh	r2, [r2, r1]
 80044fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2284      	movs	r2, #132	@ 0x84
 8004504:	18ba      	adds	r2, r7, r2
 8004506:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	228c      	movs	r2, #140	@ 0x8c
 800451c:	589b      	ldr	r3, [r3, r2]
 800451e:	2b22      	cmp	r3, #34	@ 0x22
 8004520:	d000      	beq.n	8004524 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8004522:	e179      	b.n	8004818 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004524:	2376      	movs	r3, #118	@ 0x76
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	2168      	movs	r1, #104	@ 0x68
 800452c:	5a52      	ldrh	r2, [r2, r1]
 800452e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004530:	e11e      	b.n	8004770 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004538:	2174      	movs	r1, #116	@ 0x74
 800453a:	187b      	adds	r3, r7, r1
 800453c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2282      	movs	r2, #130	@ 0x82
 8004548:	18ba      	adds	r2, r7, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	8812      	ldrh	r2, [r2, #0]
 800454e:	4013      	ands	r3, r2
 8004550:	b29a      	uxth	r2, r3
 8004552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455a:	1c9a      	adds	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	225e      	movs	r2, #94	@ 0x5e
 8004564:	5a9b      	ldrh	r3, [r3, r2]
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b299      	uxth	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	225e      	movs	r2, #94	@ 0x5e
 8004570:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	2184      	movs	r1, #132	@ 0x84
 800457a:	187a      	adds	r2, r7, r1
 800457c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800457e:	187b      	adds	r3, r7, r1
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2207      	movs	r2, #7
 8004584:	4013      	ands	r3, r2
 8004586:	d04e      	beq.n	8004626 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004588:	187b      	adds	r3, r7, r1
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	4013      	ands	r3, r2
 8004590:	d010      	beq.n	80045b4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8004592:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4013      	ands	r3, r2
 800459a:	d00b      	beq.n	80045b4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2290      	movs	r2, #144	@ 0x90
 80045a8:	589b      	ldr	r3, [r3, r2]
 80045aa:	2201      	movs	r2, #1
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2190      	movs	r1, #144	@ 0x90
 80045b2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b4:	2384      	movs	r3, #132	@ 0x84
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	d00f      	beq.n	80045e0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80045c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c2:	2201      	movs	r2, #1
 80045c4:	4013      	ands	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2202      	movs	r2, #2
 80045ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2290      	movs	r2, #144	@ 0x90
 80045d4:	589b      	ldr	r3, [r3, r2]
 80045d6:	2204      	movs	r2, #4
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2190      	movs	r1, #144	@ 0x90
 80045de:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e0:	2384      	movs	r3, #132	@ 0x84
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2204      	movs	r2, #4
 80045e8:	4013      	ands	r3, r2
 80045ea:	d00f      	beq.n	800460c <UART_RxISR_16BIT_FIFOEN+0x124>
 80045ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ee:	2201      	movs	r2, #1
 80045f0:	4013      	ands	r3, r2
 80045f2:	d00b      	beq.n	800460c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2204      	movs	r2, #4
 80045fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2290      	movs	r2, #144	@ 0x90
 8004600:	589b      	ldr	r3, [r3, r2]
 8004602:	2202      	movs	r2, #2
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2190      	movs	r1, #144	@ 0x90
 800460a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2290      	movs	r2, #144	@ 0x90
 8004610:	589b      	ldr	r3, [r3, r2]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f7fe fb3d 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2290      	movs	r2, #144	@ 0x90
 8004622:	2100      	movs	r1, #0
 8004624:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	225e      	movs	r2, #94	@ 0x5e
 800462a:	5a9b      	ldrh	r3, [r3, r2]
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d000      	beq.n	8004634 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8004632:	e09d      	b.n	8004770 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8310 	mrs	r3, PRIMASK
 8004638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800463a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800463c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800463e:	2301      	movs	r3, #1
 8004640:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4976      	ldr	r1, [pc, #472]	@ (8004830 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004656:	400a      	ands	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004666:	f3ef 8310 	mrs	r3, PRIMASK
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800466c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800466e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004670:	2301      	movs	r3, #1
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	f383 8810 	msr	PRIMASK, r3
}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	496b      	ldr	r1, [pc, #428]	@ (8004834 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004688:	400a      	ands	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800468e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	228c      	movs	r2, #140	@ 0x8c
 800469c:	2120      	movs	r1, #32
 800469e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a61      	ldr	r2, [pc, #388]	@ (8004838 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d024      	beq.n	8004700 <UART_RxISR_16BIT_FIFOEN+0x218>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a60      	ldr	r2, [pc, #384]	@ (800483c <UART_RxISR_16BIT_FIFOEN+0x354>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d01f      	beq.n	8004700 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	4013      	ands	r3, r2
 80046cc:	d018      	beq.n	8004700 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ce:	f3ef 8310 	mrs	r3, PRIMASK
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80046d8:	2301      	movs	r3, #1
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046de:	f383 8810 	msr	PRIMASK, r3
}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4954      	ldr	r1, [pc, #336]	@ (8004840 <UART_RxISR_16BIT_FIFOEN+0x358>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d12f      	bne.n	8004768 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004716:	663b      	str	r3, [r7, #96]	@ 0x60
 8004718:	2301      	movs	r3, #1
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2110      	movs	r1, #16
 8004730:	438a      	bics	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2210      	movs	r2, #16
 8004748:	4013      	ands	r3, r2
 800474a:	2b10      	cmp	r3, #16
 800474c:	d103      	bne.n	8004756 <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2210      	movs	r2, #16
 8004754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	225c      	movs	r2, #92	@ 0x5c
 800475a:	5a9a      	ldrh	r2, [r3, r2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f7fe faa1 	bl	8002ca8 <HAL_UARTEx_RxEventCallback>
 8004766:	e003      	b.n	8004770 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	0018      	movs	r0, r3
 800476c:	f7fb ffba 	bl	80006e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004770:	2376      	movs	r3, #118	@ 0x76
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800477a:	2384      	movs	r3, #132	@ 0x84
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2220      	movs	r2, #32
 8004782:	4013      	ands	r3, r2
 8004784:	d000      	beq.n	8004788 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8004786:	e6d4      	b.n	8004532 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004788:	205e      	movs	r0, #94	@ 0x5e
 800478a:	183b      	adds	r3, r7, r0
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	215e      	movs	r1, #94	@ 0x5e
 8004790:	5a52      	ldrh	r2, [r2, r1]
 8004792:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004794:	0001      	movs	r1, r0
 8004796:	187b      	adds	r3, r7, r1
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d044      	beq.n	8004828 <UART_RxISR_16BIT_FIFOEN+0x340>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2268      	movs	r2, #104	@ 0x68
 80047a2:	5a9b      	ldrh	r3, [r3, r2]
 80047a4:	187a      	adds	r2, r7, r1
 80047a6:	8812      	ldrh	r2, [r2, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d23d      	bcs.n	8004828 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ac:	f3ef 8310 	mrs	r3, PRIMASK
 80047b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047b6:	2301      	movs	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f383 8810 	msr	PRIMASK, r3
}
 80047c0:	46c0      	nop			@ (mov r8, r8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	491d      	ldr	r1, [pc, #116]	@ (8004844 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80047e2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
 80047e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80047ea:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ee:	2301      	movs	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			@ (mov r8, r8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2120      	movs	r1, #32
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004816:	e007      	b.n	8004828 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2108      	movs	r1, #8
 8004824:	430a      	orrs	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b022      	add	sp, #136	@ 0x88
 800482e:	bd80      	pop	{r7, pc}
 8004830:	fffffeff 	.word	0xfffffeff
 8004834:	effffffe 	.word	0xeffffffe
 8004838:	40008000 	.word	0x40008000
 800483c:	40008400 	.word	0x40008400
 8004840:	fbffffff 	.word	0xfbffffff
 8004844:	efffffff 	.word	0xefffffff
 8004848:	08003fc9 	.word	0x08003fc9

0800484c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004854:	46c0      	nop			@ (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004874:	46c0      	nop			@ (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2284      	movs	r2, #132	@ 0x84
 8004888:	5c9b      	ldrb	r3, [r3, r2]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UARTEx_DisableFifoMode+0x16>
 800488e:	2302      	movs	r3, #2
 8004890:	e027      	b.n	80048e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2284      	movs	r2, #132	@ 0x84
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2288      	movs	r2, #136	@ 0x88
 800489e:	2124      	movs	r1, #36	@ 0x24
 80048a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	438a      	bics	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a0b      	ldr	r2, [pc, #44]	@ (80048ec <HAL_UARTEx_DisableFifoMode+0x70>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2288      	movs	r2, #136	@ 0x88
 80048d4:	2120      	movs	r1, #32
 80048d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2284      	movs	r2, #132	@ 0x84
 80048dc:	2100      	movs	r1, #0
 80048de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b004      	add	sp, #16
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	dfffffff 	.word	0xdfffffff

080048f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2284      	movs	r2, #132	@ 0x84
 80048fe:	5c9b      	ldrb	r3, [r3, r2]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004904:	2302      	movs	r3, #2
 8004906:	e02e      	b.n	8004966 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2284      	movs	r2, #132	@ 0x84
 800490c:	2101      	movs	r1, #1
 800490e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2288      	movs	r2, #136	@ 0x88
 8004914:	2124      	movs	r1, #36	@ 0x24
 8004916:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	438a      	bics	r2, r1
 800492e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	08d9      	lsrs	r1, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0018      	movs	r0, r3
 8004948:	f000 f854 	bl	80049f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2288      	movs	r2, #136	@ 0x88
 8004958:	2120      	movs	r1, #32
 800495a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2284      	movs	r2, #132	@ 0x84
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	0018      	movs	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	b004      	add	sp, #16
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2284      	movs	r2, #132	@ 0x84
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e02f      	b.n	80049e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2284      	movs	r2, #132	@ 0x84
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2288      	movs	r2, #136	@ 0x88
 8004994:	2124      	movs	r1, #36	@ 0x24
 8004996:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2101      	movs	r1, #1
 80049ac:	438a      	bics	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	0019      	movs	r1, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 f813 	bl	80049f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2288      	movs	r2, #136	@ 0x88
 80049da:	2120      	movs	r1, #32
 80049dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2284      	movs	r2, #132	@ 0x84
 80049e2:	2100      	movs	r1, #0
 80049e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b004      	add	sp, #16
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	f1ffffff 	.word	0xf1ffffff

080049f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d108      	bne.n	8004a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	226a      	movs	r2, #106	@ 0x6a
 8004a08:	2101      	movs	r1, #1
 8004a0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2268      	movs	r2, #104	@ 0x68
 8004a10:	2101      	movs	r1, #1
 8004a12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a14:	e043      	b.n	8004a9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a16:	260f      	movs	r6, #15
 8004a18:	19bb      	adds	r3, r7, r6
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a1e:	200e      	movs	r0, #14
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	2208      	movs	r2, #8
 8004a24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	0e5b      	lsrs	r3, r3, #25
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	240d      	movs	r4, #13
 8004a32:	193b      	adds	r3, r7, r4
 8004a34:	2107      	movs	r1, #7
 8004a36:	400a      	ands	r2, r1
 8004a38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	0f5b      	lsrs	r3, r3, #29
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	250c      	movs	r5, #12
 8004a46:	197b      	adds	r3, r7, r5
 8004a48:	2107      	movs	r1, #7
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a4e:	183b      	adds	r3, r7, r0
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	197a      	adds	r2, r7, r5
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	4914      	ldr	r1, [pc, #80]	@ (8004aa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004a58:	5c8a      	ldrb	r2, [r1, r2]
 8004a5a:	435a      	muls	r2, r3
 8004a5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a5e:	197b      	adds	r3, r7, r5
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4a12      	ldr	r2, [pc, #72]	@ (8004aac <UARTEx_SetNbDataToProcess+0xb8>)
 8004a64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a66:	0019      	movs	r1, r3
 8004a68:	f7fb fbd6 	bl	8000218 <__divsi3>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	b299      	uxth	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	226a      	movs	r2, #106	@ 0x6a
 8004a74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a76:	19bb      	adds	r3, r7, r6
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	193a      	adds	r2, r7, r4
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	490a      	ldr	r1, [pc, #40]	@ (8004aa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004a80:	5c8a      	ldrb	r2, [r1, r2]
 8004a82:	435a      	muls	r2, r3
 8004a84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a86:	193b      	adds	r3, r7, r4
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <UARTEx_SetNbDataToProcess+0xb8>)
 8004a8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a8e:	0019      	movs	r1, r3
 8004a90:	f7fb fbc2 	bl	8000218 <__divsi3>
 8004a94:	0003      	movs	r3, r0
 8004a96:	b299      	uxth	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2268      	movs	r2, #104	@ 0x68
 8004a9c:	5299      	strh	r1, [r3, r2]
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b005      	add	sp, #20
 8004aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	08004b98 	.word	0x08004b98
 8004aac:	08004ba0 	.word	0x08004ba0

08004ab0 <memset>:
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	1882      	adds	r2, r0, r2
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	7019      	strb	r1, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	4c0c      	ldr	r4, [pc, #48]	@ (8004af8 <__libc_init_array+0x38>)
 8004ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8004afc <__libc_init_array+0x3c>)
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	f000 f819 	bl	8004b08 <_init>
 8004ad6:	4c0a      	ldr	r4, [pc, #40]	@ (8004b00 <__libc_init_array+0x40>)
 8004ad8:	4d0a      	ldr	r5, [pc, #40]	@ (8004b04 <__libc_init_array+0x44>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	00b3      	lsls	r3, r6, #2
 8004ae6:	58eb      	ldr	r3, [r5, r3]
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	00b3      	lsls	r3, r6, #2
 8004af0:	58eb      	ldr	r3, [r5, r3]
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08004bb0 	.word	0x08004bb0
 8004afc:	08004bb0 	.word	0x08004bb0
 8004b00:	08004bb4 	.word	0x08004bb4
 8004b04:	08004bb0 	.word	0x08004bb0

08004b08 <_init>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr

08004b14 <_fini>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr
